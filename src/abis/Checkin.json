{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ErrAlreadyActivatedStreak",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrCallerNotDelegated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrFreezeTimeEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidOrderOfRestorationCosts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidResetDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrInvalidStreakLifeTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrNewUserCannotRestore",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrNoLostStreak",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrStartNewStreakByDelegatee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrZeroLostStreakCount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prayer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "syncedDayIndex",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "countPerDay",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct ICheckin.CheckerCountInfo",
          "name": "prayerCountInfo",
          "type": "tuple"
        }
      ],
      "name": "CheckerCountSynced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFreezePeriod",
          "type": "uint256"
        }
      ],
      "name": "FreezePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "InitialTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPaymentToken",
          "type": "address"
        }
      ],
      "name": "PaymentTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newResetDuration",
          "type": "uint256"
        }
      ],
      "name": "ResetDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "lowerMilestone",
              "type": "uint32"
            },
            {
              "internalType": "uint80",
              "name": "costInToken",
              "type": "uint80"
            }
          ],
          "indexed": false,
          "internalType": "struct ICheckin.RestorationCost[]",
          "name": "newRestorationCosts",
          "type": "tuple[]"
        }
      ],
      "name": "RestorationCostUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "streakLifeTime",
          "type": "uint256"
        }
      ],
      "name": "StreakLifeTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "restoredStreakCount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "costInPaymentToken",
          "type": "uint256"
        }
      ],
      "name": "StreakRestored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newLastUpdated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longestStreakCount",
          "type": "uint256"
        }
      ],
      "name": "StreakUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "activateStreak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "streaks",
          "type": "uint256[]"
        }
      ],
      "name": "forceRestoreStreak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getActivationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isLostStreak",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasCheckedToday",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRestorationCosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "lowerMilestone",
              "type": "uint32"
            },
            {
              "internalType": "uint80",
              "name": "costInToken",
              "type": "uint80"
            }
          ],
          "internalType": "struct ICheckin.RestorationCost[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFreezePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getResetDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lostStreakCount",
          "type": "uint256"
        }
      ],
      "name": "getRestorationCosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "costInPaymentToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStreak",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentStreakCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastActivated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "longestStreakCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lostStreakCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreakLifeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streakLifeTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "resetTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "freezeTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "lowerMilestone",
              "type": "uint32"
            },
            {
              "internalType": "uint80",
              "name": "costInToken",
              "type": "uint80"
            }
          ],
          "internalType": "struct ICheckin.RestorationCost[]",
          "name": "restorationCosts",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isRestorable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "restoreStreak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFreezePeriod",
          "type": "uint256"
        }
      ],
      "name": "setFreezePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newResetDuration",
          "type": "uint256"
        }
      ],
      "name": "setResetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "lowerMilestone",
              "type": "uint32"
            },
            {
              "internalType": "uint80",
              "name": "costInToken",
              "type": "uint80"
            }
          ],
          "internalType": "struct ICheckin.RestorationCost[]",
          "name": "restorationCosts",
          "type": "tuple[]"
        }
      ],
      "name": "setRestorationCosts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b6200015a565b62000031828262000035565b5050565b62000041828262000060565b60008281526002602052604090206200005b9082620000e8565b505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000315760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000620000ff836001600160a01b03841662000108565b90505b92915050565b6000818152600183016020526040812054620001515750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000102565b50600062000102565b612118806200016a6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806364c02908116101045780639fe4f9d6116100a2578063d41c3a6511610071578063d41c3a65146103f5578063d547741f14610406578063f0f4426014610419578063fc44e00b1461042c57600080fd5b80639fe4f9d6146103ca578063a217fddf146103d2578063ca15c873146103da578063d0b294da146103ed57600080fd5b80636d16c15b116100de5780636d16c15b14610367578063886ce65c146103915780639010d07c146103a457806391d14854146103b757600080fd5b806364c02908146103395780636a326ab1146103415780636c7976d51461035457600080fd5b8063333ebe12116101715780633b19e84a1161014b5780633b19e84a146102bb57806343afef80146102e057806357120165146102f35780635eeadb0d1461030657600080fd5b8063333ebe121461028057806336568abe1461029357806336cee514146102a657600080fd5b8063199fef65116101ad578063199fef6514610223578063248a9ca3146102365780632f2ff15d1461025a578063317113091461026d57600080fd5b806301ffc9a7146101d457806307a4f002146101fc5780631614252f14610211575b600080fd5b6101e76101e23660046119fc565b61043f565b60405190151581526020015b60405180910390f35b61020f61020a366004611ae5565b61046a565b005b6006545b6040519081526020016101f3565b61020f610231366004611bd9565b610482565b610215610244366004611c45565b6000908152600160208190526040909120015490565b61020f610268366004611c7a565b610515565b61020f61027b366004611ca6565b610540565b6101e761028e366004611ca6565b61054c565b61020f6102a1366004611c7a565b6105ed565b6102ae61066c565b6040516101f39190611cc1565b6008546001600160a01b03165b6040516001600160a01b0390911681526020016101f3565b61020f6102ee366004611d1f565b6106e6565b61020f610301366004611c45565b6106f0565b610319610314366004611ca6565b610704565b6040805194855260208501939093529183015260608201526080016101f3565b600454610215565b61020f61034f366004611ca6565b6107a6565b61020f610362366004611d49565b6107ba565b61037a610375366004611ca6565b610966565b6040805192151583529015156020830152016101f3565b61020f61039f366004611c45565b6109d6565b6102c86103b2366004611dfd565b6109ea565b6101e76103c5366004611c7a565b610a09565b600754610215565b610215600081565b6102156103e8366004611c45565b610a34565b600354610215565b6009546001600160a01b03166102c8565b61020f610414366004611c7a565b610a4b565b61020f610427366004611ca6565b610a71565b61021561043a366004611c45565b610a85565b60006001600160e01b03198216635a05180f60e01b1480610464575061046482610a90565b92915050565b600061047581610ac5565b61047e82610acf565b5050565b600061048d81610ac5565b838281146104ae57604051638234cda560e01b815260040160405180910390fd5b60005b8181101561050c576105038585838181106104ce576104ce611e1f565b905060200201358888848181106104e7576104e7611e1f565b90506020020160208101906104fc9190611ca6565b6000610c8f565b506001016104b1565b50505050505050565b6000828152600160208190526040909120015461053181610ac5565b61053b8383610d2c565b505050565b61054981610d4e565b50565b6001600160a01b0381166000908152600560209081526040808320815160608101835281548152600182015493810193909352600201549082015261059381602001511590565b156105a15750600092915050565b6000806105ad83610e43565b90925090506000600182018311905060006105d5836003546004546007549202010142101590565b90508180156105e2575080155b979650505050505050565b6001600160a01b03811633146106625760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61047e8282610e65565b6060600a805480602002602001604051908101604052809291908181526020016000905b828210156106dd576000848152602090819020604080518082019091529084015463ffffffff8116825264010000000090046001600160501b031681830152825260019092019101610690565b50505050905090565b61047e8282610e87565b60006106fb81610ac5565b61047e82610fe6565b6001600160a01b03811660009081526005602090815260408083208151606081018352815481526001820154938101849052600290910154918101919091528291829182916107615760008060008094509450945094505061079f565b60008061076d83610e43565b90925090506001810182118015610787578351945061078c565b835197505b8360200151965083604001519550505050505b9193509193565b60006107b181610ac5565b61047e82611022565b60006107c581610ac5565b600054610100900460ff16158080156107e55750600054600160ff909116105b806107ff5750303b1580156107ff575060005460ff166001145b6108625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610659565b6000805460ff191660011790558015610885576000805461ff0019166101001790555b61088e89611070565b610897886110c5565b6108a087610fe6565b6108a986611022565b6108b28561111c565b61090d8484808060200260200160405190810160405280939291908181526020016000905b82821015610903576108f460408302860136819003810190611e35565b815260200190600101906108d7565b5050505050610acf565b61091561116a565b801561095b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6001600160a01b038116600090815260056020908152604080832081516060810183528154815260018201549381018490526002909101549181019190915282916109b75750600093849350915050565b6000806109c383610e43565b6001810182119891149650945050505050565b60006109e181610ac5565b61047e826110c5565b6000828152600260205260408120610a0290836111fe565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206104649061120a565b60008281526001602081905260409091200154610a6781610ac5565b61053b8383610e65565b6000610a7c81610ac5565b61047e8261111c565b600061046482611214565b60006001600160e01b03198216637965db0b60e01b148061046457506301ffc9a760e01b6001600160e01b0319831614610464565b6105498133611328565b610adb600a60006119c0565b8051801580610aeb575081518114155b15610b0957604051638234cda560e01b815260040160405180910390fd5b600a82600081518110610b1e57610b1e611e1f565b60209081029190910181015182546001818101855560009485529383902082519101805492909301516001600160501b0316640100000000026001600160701b031990921663ffffffff909116171790555b81811015610c535782610b84600183611e67565b81518110610b9457610b94611e1f565b60200260200101516000015163ffffffff16838281518110610bb857610bb8611e1f565b60200260200101516000015163ffffffff1611610be857604051631b98670360e21b815260040160405180910390fd5b600a838281518110610bfc57610bfc611e1f565b60209081029190910181015182546001818101855560009485529383902082519101805492909301516001600160501b0316640100000000026001600160701b031990921663ffffffff9091161717905501610b70565b507fdb16718cd968791fb87ccb9de4392526cf98a50acf9f2ce4a3e66e95e6a5138082604051610c839190611cc1565b60405180910390a15050565b600081610c9f5783600101610ca2565b60015b6001600160a01b0384166000908152600560205260409020818155426001820155600281015491925090821115610cdb57600281018290555b4282856001600160a01b03167f62fbe39954276c01e2d7a17f048cec9d25cc2099b61f7858a7accd2b4216382e8460020154604051610d1c91815260200190565b60405180910390a4509392505050565b610d368282611381565b600082815260026020526040902061053b90826113ec565b6001600160a01b038116600090815260056020908152604091829020825160608101845281548152600182015492810183905260029091015492810192909252610da057805161053b90836000610c8f565b600080610dac83610e43565b60035460045460075493955091935060018401851192848614928502909101014210158115610dee57604051631bbe8fb560e01b815260040160405180910390fd5b6001600160a01b0387163314801590610e045750825b8015610e0e575080155b15610e2c576040516361ed2e4360e11b815260040160405180910390fd5b8551610e39908885610c8f565b5050505050505050565b600080610e4f42611401565b9150610e5e8360200151611401565b9050915091565b610e6f828261141f565b600082815260026020526040902061053b9082611486565b6001600160a01b038216600090815260056020908152604091829020825160608101845281548152600182015492810183905260029091015492810192909252610ee45760405163ab0daa4360e01b815260040160405180910390fd5b80516000819003610f0857604051632b499cf360e11b815260040160405180910390fd5b600080610f1484610e43565b909250905060018101821180610f3d5760405163578aeb8560e11b815260040160405180910390fd5b6000610f56836003546004546007549202010142101590565b90508015610f77576040516350af743b60e11b815260040160405180910390fd5b610f8385896000610c8f565b506000610f90868961149b565b90508660200151868a6001600160a01b03167ff28bbd867919567fe2160a544c4eb8e4e4c701374125dec9914d35f3f6f2cfa084604051610fd391815260200190565b60405180910390a4505050505050505050565b60078190556040518181527fe5cfb067fd3553c2c8f52bd13990a943e4eedc525c139207ebf6ae790f6d190b906020015b60405180910390a150565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527fbd4032c1c91da2791730ea1bbc82c6b6f857da7c0a8318143d19ef74e62cd91390602001611017565b80600003611090576040516225d70160e31b815260040160405180910390fd5b60048190556040518181527f146873d234c634d82ab629efeea3ad261275c3b4c733e1e2e6487f76cbc5a60290602001611017565b60045481106110e75760405163198385cf60e01b815260040160405180910390fd5b60068190556040518181527f4534d7ef285882c47146e4b0a0f0192a2e3e8dc978949664ddf2c82c5baef36790602001611017565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190602001611017565b6004546111779042611e90565b600381815560019160009061118d908490611e67565b9091555050600454600380546000906111a7908490611eb2565b9091555050600654600380546000906111c1908490611ec9565b90915550506003546040519081527fe2c5cbdae5c8cc0fd0fb5e290b9b861f04ab4f837d07e0d600d25a94a51b12309060200160405180910390a1565b6000610a0283836114ee565b6000610464825490565b600080600a805480602002602001604051908101604052809291908181526020016000905b82821015611286576000848152602090819020604080518082019091529084015463ffffffff8116825264010000000090046001600160501b031681830152825260019092019101611239565b50508251929350505060008190036112a2575060009392505050565b60006112af600183611e67565b90505b8281815181106112c4576112c4611e1f565b60200260200101516000015163ffffffff16851061130a578281815181106112ee576112ee611e1f565b6020026020010151602001516001600160501b03169350611320565b80156113205761131981611edc565b90506112b2565b505050919050565b6113328282610a09565b61047e5761133f81611518565b61134a83602061152a565b60405160200161135b929190611f17565b60408051601f198184030181529082905262461bcd60e51b825261065991600401611f8c565b61138b8282610a09565b61047e5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610a02836001600160a01b0384166116c6565b600060045460035483038161141857611418611e7a565b0492915050565b6114298282610a09565b1561047e5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a02836001600160a01b038416611715565b60006114a683611214565b9050801561046457818111156114cf5760405163023858cd60e01b815260040160405180910390fd5b600854600954610464916001600160a01b039182169133911684611808565b600082600001828154811061150557611505611e1f565b9060005260206000200154905092915050565b60606104646001600160a01b03831660145b60606000611539836002611eb2565b611544906002611ec9565b67ffffffffffffffff81111561155c5761155c611a26565b6040519080825280601f01601f191660200182016040528015611586576020820181803683370190505b509050600360fc1b816000815181106115a1576115a1611e1f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115d0576115d0611e1f565b60200101906001600160f81b031916908160001a90535060006115f4846002611eb2565b6115ff906001611ec9565b90505b6001811115611677576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061163357611633611e1f565b1a60f81b82828151811061164957611649611e1f565b60200101906001600160f81b031916908160001a90535060049490941c9361167081611edc565b9050611602565b508315610a025760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610659565b600081815260018301602052604081205461170d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610464565b506000610464565b600081815260018301602052604081205480156117fe576000611739600183611e67565b855490915060009061174d90600190611e67565b90508181146117b257600086600001828154811061176d5761176d611e1f565b906000526020600020015490508087600001848154811061179057611790611e1f565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117c3576117c3611fbf565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610464565b6000915050610464565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161186c9190611fd5565b6000604051808303816000865af19150503d80600081146118a9576040519150601f19603f3d011682016040523d82523d6000602084013e6118ae565b606091505b50915091508115806118da5750805115806118d85750808060200190518101906118d89190611ff1565b155b15611937576118f3866001600160a01b0316601461152a565b611907866001600160a01b0316601461152a565b61191b866001600160a01b0316601461152a565b6119248661193f565b60405160200161135b9493929190612013565b505050505050565b60606104648261194e84611956565b60010161152a565b600080608083901c1561196e5760809290921c916010015b604083901c156119835760409290921c916008015b602083901c156119985760209290921c916004015b601083901c156119ad5760109290921c916002015b600883901c156104645760010192915050565b508054600082559060005260206000209081019061054991905b808211156119f85780546001600160701b03191681556001016119da565b5090565b600060208284031215611a0e57600080fd5b81356001600160e01b031981168114610a0257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6557611a65611a26565b604052919050565b600060408284031215611a7f57600080fd5b6040516040810181811067ffffffffffffffff82111715611aa257611aa2611a26565b604052905080823563ffffffff81168114611abc57600080fd5b815260208301356001600160501b0381168114611ad857600080fd5b6020919091015292915050565b60006020808385031215611af857600080fd5b823567ffffffffffffffff80821115611b1057600080fd5b818501915085601f830112611b2457600080fd5b813581811115611b3657611b36611a26565b611b44848260051b01611a3c565b818152848101925060069190911b830184019087821115611b6457600080fd5b928401925b818410156105e257611b7b8885611a6d565b83528483019250604084019350611b69565b60008083601f840112611b9f57600080fd5b50813567ffffffffffffffff811115611bb757600080fd5b6020830191508360208260051b8501011115611bd257600080fd5b9250929050565b60008060008060408587031215611bef57600080fd5b843567ffffffffffffffff80821115611c0757600080fd5b611c1388838901611b8d565b90965094506020870135915080821115611c2c57600080fd5b50611c3987828801611b8d565b95989497509550505050565b600060208284031215611c5757600080fd5b5035919050565b80356001600160a01b0381168114611c7557600080fd5b919050565b60008060408385031215611c8d57600080fd5b82359150611c9d60208401611c5e565b90509250929050565b600060208284031215611cb857600080fd5b610a0282611c5e565b602080825282518282018190526000919060409081850190868401855b82811015611d12578151805163ffffffff1685528601516001600160501b0316868501529284019290850190600101611cde565b5091979650505050505050565b60008060408385031215611d3257600080fd5b611d3b83611c5e565b946020939093013593505050565b600080600080600080600060c0888a031215611d6457600080fd5b873596506020880135955060408801359450611d8260608901611c5e565b9350611d9060808901611c5e565b925060a088013567ffffffffffffffff80821115611dad57600080fd5b818a0191508a601f830112611dc157600080fd5b813581811115611dd057600080fd5b8b60208260061b8501011115611de557600080fd5b60208301945080935050505092959891949750929550565b60008060408385031215611e1057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600060408284031215611e4757600080fd5b610a028383611a6d565b634e487b7160e01b600052601160045260246000fd5b8181038181111561046457610464611e51565b634e487b7160e01b600052601260045260246000fd5b600082611ead57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761046457610464611e51565b8082018082111561046457610464611e51565b600081611eeb57611eeb611e51565b506000190190565b60005b83811015611f0e578181015183820152602001611ef6565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f4f816017850160208801611ef3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f80816028840160208801611ef3565b01602801949350505050565b6020815260008251806020840152611fab816040850160208701611ef3565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603160045260246000fd5b60008251611fe7818460208701611ef3565b9190910192915050565b60006020828403121561200357600080fd5b81518015158114610a0257600080fd5b7f5472616e7366657246726f6d48656c7065723a20636f756c64206e6f7420747281526c030b739b332b9103a37b5b2b71609d1b60208201526000855161206181602d850160208a01611ef3565b65010333937b6960d51b602d918401918201528551612087816033840160208a01611ef3565b630103a37960e51b6033929091019182015284516120ac816037840160208901611ef3565b660103b30b63ab2960cd1b6037929091019182015283516120d481603e840160208801611ef3565b01603e01969550505050505056fea264697066735822122054e5f927350c4fed20a5e7ce7837d70ef9562cab4e5b1a98d1940f595c22b17764736f6c63430008170033",
    "sourceMap": "108:263:44:-:0;;;148:31;;;;;;;;;-1:-1:-1;2165:42:43;2198:4:23;2196:10:43;2165;:42::i;:::-;108:263:44;;6937:110:23;7015:25;7026:4;7032:7;7015:10;:25::i;:::-;6937:110;;:::o;1978:166:24:-;2065:31;2082:4;2088:7;2065:16;:31::i;:::-;2106:18;;;;:12;:18;;;;;:31;;2129:7;2106:22;:31::i;:::-;;1978:166;;:::o;7587:233:23:-;3107:4;3130:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3130:29:23;;;;;;;;;;;;7665:149;;7708:12;;;;7740:4;7708:12;;;;;;;;-1:-1:-1;;;;;7708:29:23;;;;;;;;;;:36;;-1:-1:-1;;7708:36:23;;;;;;;7763:40;;719:10:33;;7708:12:23;;7763:40;;7708:12;7763:40;7587:233;;:::o;8305:150:39:-;8375:4;8398:50;8403:3;-1:-1:-1;;;;;8423:23:39;;8398:4;:50::i;:::-;8391:57;;8305:150;;;;;:::o;2214:404::-;2277:4;4351:19;;;:12;;;:19;;;;;;2293:319;;-1:-1:-1;2335:23:39;;;;;;;;:11;:23;;;;;;;;;;;;;2515:18;;2493:19;;;:12;;;:19;;;;;;:40;;;;2547:11;;2293:319;-1:-1:-1;2596:5:39;2589:12;;108:263:44;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806364c02908116101045780639fe4f9d6116100a2578063d41c3a6511610071578063d41c3a65146103f5578063d547741f14610406578063f0f4426014610419578063fc44e00b1461042c57600080fd5b80639fe4f9d6146103ca578063a217fddf146103d2578063ca15c873146103da578063d0b294da146103ed57600080fd5b80636d16c15b116100de5780636d16c15b14610367578063886ce65c146103915780639010d07c146103a457806391d14854146103b757600080fd5b806364c02908146103395780636a326ab1146103415780636c7976d51461035457600080fd5b8063333ebe12116101715780633b19e84a1161014b5780633b19e84a146102bb57806343afef80146102e057806357120165146102f35780635eeadb0d1461030657600080fd5b8063333ebe121461028057806336568abe1461029357806336cee514146102a657600080fd5b8063199fef65116101ad578063199fef6514610223578063248a9ca3146102365780632f2ff15d1461025a578063317113091461026d57600080fd5b806301ffc9a7146101d457806307a4f002146101fc5780631614252f14610211575b600080fd5b6101e76101e23660046119fc565b61043f565b60405190151581526020015b60405180910390f35b61020f61020a366004611ae5565b61046a565b005b6006545b6040519081526020016101f3565b61020f610231366004611bd9565b610482565b610215610244366004611c45565b6000908152600160208190526040909120015490565b61020f610268366004611c7a565b610515565b61020f61027b366004611ca6565b610540565b6101e761028e366004611ca6565b61054c565b61020f6102a1366004611c7a565b6105ed565b6102ae61066c565b6040516101f39190611cc1565b6008546001600160a01b03165b6040516001600160a01b0390911681526020016101f3565b61020f6102ee366004611d1f565b6106e6565b61020f610301366004611c45565b6106f0565b610319610314366004611ca6565b610704565b6040805194855260208501939093529183015260608201526080016101f3565b600454610215565b61020f61034f366004611ca6565b6107a6565b61020f610362366004611d49565b6107ba565b61037a610375366004611ca6565b610966565b6040805192151583529015156020830152016101f3565b61020f61039f366004611c45565b6109d6565b6102c86103b2366004611dfd565b6109ea565b6101e76103c5366004611c7a565b610a09565b600754610215565b610215600081565b6102156103e8366004611c45565b610a34565b600354610215565b6009546001600160a01b03166102c8565b61020f610414366004611c7a565b610a4b565b61020f610427366004611ca6565b610a71565b61021561043a366004611c45565b610a85565b60006001600160e01b03198216635a05180f60e01b1480610464575061046482610a90565b92915050565b600061047581610ac5565b61047e82610acf565b5050565b600061048d81610ac5565b838281146104ae57604051638234cda560e01b815260040160405180910390fd5b60005b8181101561050c576105038585838181106104ce576104ce611e1f565b905060200201358888848181106104e7576104e7611e1f565b90506020020160208101906104fc9190611ca6565b6000610c8f565b506001016104b1565b50505050505050565b6000828152600160208190526040909120015461053181610ac5565b61053b8383610d2c565b505050565b61054981610d4e565b50565b6001600160a01b0381166000908152600560209081526040808320815160608101835281548152600182015493810193909352600201549082015261059381602001511590565b156105a15750600092915050565b6000806105ad83610e43565b90925090506000600182018311905060006105d5836003546004546007549202010142101590565b90508180156105e2575080155b979650505050505050565b6001600160a01b03811633146106625760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61047e8282610e65565b6060600a805480602002602001604051908101604052809291908181526020016000905b828210156106dd576000848152602090819020604080518082019091529084015463ffffffff8116825264010000000090046001600160501b031681830152825260019092019101610690565b50505050905090565b61047e8282610e87565b60006106fb81610ac5565b61047e82610fe6565b6001600160a01b03811660009081526005602090815260408083208151606081018352815481526001820154938101849052600290910154918101919091528291829182916107615760008060008094509450945094505061079f565b60008061076d83610e43565b90925090506001810182118015610787578351945061078c565b835197505b8360200151965083604001519550505050505b9193509193565b60006107b181610ac5565b61047e82611022565b60006107c581610ac5565b600054610100900460ff16158080156107e55750600054600160ff909116105b806107ff5750303b1580156107ff575060005460ff166001145b6108625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610659565b6000805460ff191660011790558015610885576000805461ff0019166101001790555b61088e89611070565b610897886110c5565b6108a087610fe6565b6108a986611022565b6108b28561111c565b61090d8484808060200260200160405190810160405280939291908181526020016000905b82821015610903576108f460408302860136819003810190611e35565b815260200190600101906108d7565b5050505050610acf565b61091561116a565b801561095b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6001600160a01b038116600090815260056020908152604080832081516060810183528154815260018201549381018490526002909101549181019190915282916109b75750600093849350915050565b6000806109c383610e43565b6001810182119891149650945050505050565b60006109e181610ac5565b61047e826110c5565b6000828152600260205260408120610a0290836111fe565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206104649061120a565b60008281526001602081905260409091200154610a6781610ac5565b61053b8383610e65565b6000610a7c81610ac5565b61047e8261111c565b600061046482611214565b60006001600160e01b03198216637965db0b60e01b148061046457506301ffc9a760e01b6001600160e01b0319831614610464565b6105498133611328565b610adb600a60006119c0565b8051801580610aeb575081518114155b15610b0957604051638234cda560e01b815260040160405180910390fd5b600a82600081518110610b1e57610b1e611e1f565b60209081029190910181015182546001818101855560009485529383902082519101805492909301516001600160501b0316640100000000026001600160701b031990921663ffffffff909116171790555b81811015610c535782610b84600183611e67565b81518110610b9457610b94611e1f565b60200260200101516000015163ffffffff16838281518110610bb857610bb8611e1f565b60200260200101516000015163ffffffff1611610be857604051631b98670360e21b815260040160405180910390fd5b600a838281518110610bfc57610bfc611e1f565b60209081029190910181015182546001818101855560009485529383902082519101805492909301516001600160501b0316640100000000026001600160701b031990921663ffffffff9091161717905501610b70565b507fdb16718cd968791fb87ccb9de4392526cf98a50acf9f2ce4a3e66e95e6a5138082604051610c839190611cc1565b60405180910390a15050565b600081610c9f5783600101610ca2565b60015b6001600160a01b0384166000908152600560205260409020818155426001820155600281015491925090821115610cdb57600281018290555b4282856001600160a01b03167f62fbe39954276c01e2d7a17f048cec9d25cc2099b61f7858a7accd2b4216382e8460020154604051610d1c91815260200190565b60405180910390a4509392505050565b610d368282611381565b600082815260026020526040902061053b90826113ec565b6001600160a01b038116600090815260056020908152604091829020825160608101845281548152600182015492810183905260029091015492810192909252610da057805161053b90836000610c8f565b600080610dac83610e43565b60035460045460075493955091935060018401851192848614928502909101014210158115610dee57604051631bbe8fb560e01b815260040160405180910390fd5b6001600160a01b0387163314801590610e045750825b8015610e0e575080155b15610e2c576040516361ed2e4360e11b815260040160405180910390fd5b8551610e39908885610c8f565b5050505050505050565b600080610e4f42611401565b9150610e5e8360200151611401565b9050915091565b610e6f828261141f565b600082815260026020526040902061053b9082611486565b6001600160a01b038216600090815260056020908152604091829020825160608101845281548152600182015492810183905260029091015492810192909252610ee45760405163ab0daa4360e01b815260040160405180910390fd5b80516000819003610f0857604051632b499cf360e11b815260040160405180910390fd5b600080610f1484610e43565b909250905060018101821180610f3d5760405163578aeb8560e11b815260040160405180910390fd5b6000610f56836003546004546007549202010142101590565b90508015610f77576040516350af743b60e11b815260040160405180910390fd5b610f8385896000610c8f565b506000610f90868961149b565b90508660200151868a6001600160a01b03167ff28bbd867919567fe2160a544c4eb8e4e4c701374125dec9914d35f3f6f2cfa084604051610fd391815260200190565b60405180910390a4505050505050505050565b60078190556040518181527fe5cfb067fd3553c2c8f52bd13990a943e4eedc525c139207ebf6ae790f6d190b906020015b60405180910390a150565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527fbd4032c1c91da2791730ea1bbc82c6b6f857da7c0a8318143d19ef74e62cd91390602001611017565b80600003611090576040516225d70160e31b815260040160405180910390fd5b60048190556040518181527f146873d234c634d82ab629efeea3ad261275c3b4c733e1e2e6487f76cbc5a60290602001611017565b60045481106110e75760405163198385cf60e01b815260040160405180910390fd5b60068190556040518181527f4534d7ef285882c47146e4b0a0f0192a2e3e8dc978949664ddf2c82c5baef36790602001611017565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f7dae230f18360d76a040c81f050aa14eb9d6dc7901b20fc5d855e2a20fe814d190602001611017565b6004546111779042611e90565b600381815560019160009061118d908490611e67565b9091555050600454600380546000906111a7908490611eb2565b9091555050600654600380546000906111c1908490611ec9565b90915550506003546040519081527fe2c5cbdae5c8cc0fd0fb5e290b9b861f04ab4f837d07e0d600d25a94a51b12309060200160405180910390a1565b6000610a0283836114ee565b6000610464825490565b600080600a805480602002602001604051908101604052809291908181526020016000905b82821015611286576000848152602090819020604080518082019091529084015463ffffffff8116825264010000000090046001600160501b031681830152825260019092019101611239565b50508251929350505060008190036112a2575060009392505050565b60006112af600183611e67565b90505b8281815181106112c4576112c4611e1f565b60200260200101516000015163ffffffff16851061130a578281815181106112ee576112ee611e1f565b6020026020010151602001516001600160501b03169350611320565b80156113205761131981611edc565b90506112b2565b505050919050565b6113328282610a09565b61047e5761133f81611518565b61134a83602061152a565b60405160200161135b929190611f17565b60408051601f198184030181529082905262461bcd60e51b825261065991600401611f8c565b61138b8282610a09565b61047e5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610a02836001600160a01b0384166116c6565b600060045460035483038161141857611418611e7a565b0492915050565b6114298282610a09565b1561047e5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a02836001600160a01b038416611715565b60006114a683611214565b9050801561046457818111156114cf5760405163023858cd60e01b815260040160405180910390fd5b600854600954610464916001600160a01b039182169133911684611808565b600082600001828154811061150557611505611e1f565b9060005260206000200154905092915050565b60606104646001600160a01b03831660145b60606000611539836002611eb2565b611544906002611ec9565b67ffffffffffffffff81111561155c5761155c611a26565b6040519080825280601f01601f191660200182016040528015611586576020820181803683370190505b509050600360fc1b816000815181106115a1576115a1611e1f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106115d0576115d0611e1f565b60200101906001600160f81b031916908160001a90535060006115f4846002611eb2565b6115ff906001611ec9565b90505b6001811115611677576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061163357611633611e1f565b1a60f81b82828151811061164957611649611e1f565b60200101906001600160f81b031916908160001a90535060049490941c9361167081611edc565b9050611602565b508315610a025760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610659565b600081815260018301602052604081205461170d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610464565b506000610464565b600081815260018301602052604081205480156117fe576000611739600183611e67565b855490915060009061174d90600190611e67565b90508181146117b257600086600001828154811061176d5761176d611e1f565b906000526020600020015490508087600001848154811061179057611790611e1f565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806117c3576117c3611fbf565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610464565b6000915050610464565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161186c9190611fd5565b6000604051808303816000865af19150503d80600081146118a9576040519150601f19603f3d011682016040523d82523d6000602084013e6118ae565b606091505b50915091508115806118da5750805115806118d85750808060200190518101906118d89190611ff1565b155b15611937576118f3866001600160a01b0316601461152a565b611907866001600160a01b0316601461152a565b61191b866001600160a01b0316601461152a565b6119248661193f565b60405160200161135b9493929190612013565b505050505050565b60606104648261194e84611956565b60010161152a565b600080608083901c1561196e5760809290921c916010015b604083901c156119835760409290921c916008015b602083901c156119985760209290921c916004015b601083901c156119ad5760109290921c916002015b600883901c156104645760010192915050565b508054600082559060005260206000209081019061054991905b808211156119f85780546001600160701b03191681556001016119da565b5090565b600060208284031215611a0e57600080fd5b81356001600160e01b031981168114610a0257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6557611a65611a26565b604052919050565b600060408284031215611a7f57600080fd5b6040516040810181811067ffffffffffffffff82111715611aa257611aa2611a26565b604052905080823563ffffffff81168114611abc57600080fd5b815260208301356001600160501b0381168114611ad857600080fd5b6020919091015292915050565b60006020808385031215611af857600080fd5b823567ffffffffffffffff80821115611b1057600080fd5b818501915085601f830112611b2457600080fd5b813581811115611b3657611b36611a26565b611b44848260051b01611a3c565b818152848101925060069190911b830184019087821115611b6457600080fd5b928401925b818410156105e257611b7b8885611a6d565b83528483019250604084019350611b69565b60008083601f840112611b9f57600080fd5b50813567ffffffffffffffff811115611bb757600080fd5b6020830191508360208260051b8501011115611bd257600080fd5b9250929050565b60008060008060408587031215611bef57600080fd5b843567ffffffffffffffff80821115611c0757600080fd5b611c1388838901611b8d565b90965094506020870135915080821115611c2c57600080fd5b50611c3987828801611b8d565b95989497509550505050565b600060208284031215611c5757600080fd5b5035919050565b80356001600160a01b0381168114611c7557600080fd5b919050565b60008060408385031215611c8d57600080fd5b82359150611c9d60208401611c5e565b90509250929050565b600060208284031215611cb857600080fd5b610a0282611c5e565b602080825282518282018190526000919060409081850190868401855b82811015611d12578151805163ffffffff1685528601516001600160501b0316868501529284019290850190600101611cde565b5091979650505050505050565b60008060408385031215611d3257600080fd5b611d3b83611c5e565b946020939093013593505050565b600080600080600080600060c0888a031215611d6457600080fd5b873596506020880135955060408801359450611d8260608901611c5e565b9350611d9060808901611c5e565b925060a088013567ffffffffffffffff80821115611dad57600080fd5b818a0191508a601f830112611dc157600080fd5b813581811115611dd057600080fd5b8b60208260061b8501011115611de557600080fd5b60208301945080935050505092959891949750929550565b60008060408385031215611e1057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600060408284031215611e4757600080fd5b610a028383611a6d565b634e487b7160e01b600052601160045260246000fd5b8181038181111561046457610464611e51565b634e487b7160e01b600052601260045260246000fd5b600082611ead57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761046457610464611e51565b8082018082111561046457610464611e51565b600081611eeb57611eeb611e51565b506000190190565b60005b83811015611f0e578181015183820152602001611ef6565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611f4f816017850160208801611ef3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611f80816028840160208801611ef3565b01602801949350505050565b6020815260008251806020840152611fab816040850160208701611ef3565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603160045260246000fd5b60008251611fe7818460208701611ef3565b9190910192915050565b60006020828403121561200357600080fd5b81518015158114610a0257600080fd5b7f5472616e7366657246726f6d48656c7065723a20636f756c64206e6f7420747281526c030b739b332b9103a37b5b2b71609d1b60208201526000855161206181602d850160208a01611ef3565b65010333937b6960d51b602d918401918201528551612087816033840160208a01611ef3565b630103a37960e51b6033929091019182015284516120ac816037840160208901611ef3565b660103b30b63ab2960cd1b6037929091019182015283516120d481603e840160208801611ef3565b01603e01969550505050505056fea264697066735822122054e5f927350c4fed20a5e7ce7837d70ef9562cab4e5b1a98d1940f595c22b17764736f6c63430008170033",
    "sourceMap": "108:263:44:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;634:212:24;;;;;;:::i;:::-;;:::i;:::-;;;470:14:48;;463:22;445:41;;433:2;418:18;634:212:24;;;;;;;;9104:159:43;;;;;;:::i;:::-;;:::i;:::-;;7737:88;7810:10;;7737:88;;;2770:25:48;;;2758:2;2743:18;7737:88:43;2624:177:48;5326:375:43;;;;;;:::i;:::-;;:::i;4504:129:23:-;;;;;;:::i;:::-;4578:7;4604:12;;;:6;:12;;;;;;;;:22;;;4504:129;4929:145;;;;;;:::i;:::-;;:::i;183:75:44:-;;;;;;:::i;:::-;;:::i;5732:468:43:-;;;;;;:::i;:::-;;:::i;6038:214:23:-;;;;;;:::i;:::-;;:::i;8209:118:43:-;;;:::i;:::-;;;;;;;:::i;7975:82::-;8043:9;;-1:-1:-1;;;;;8043:9:43;7975:82;;;-1:-1:-1;;;;;5972:32:48;;;5954:51;;5942:2;5927:18;7975:82:43;5808:203:48;262:107:44;;;;;;:::i;:::-;;:::i;8643:132:43:-;;;;;;:::i;:::-;;:::i;6231:699::-;;;;;;:::i;:::-;;:::i;:::-;;;;6691:25:48;;;6747:2;6732:18;;6725:34;;;;6775:18;;;6768:34;6833:2;6818:18;;6811:34;6678:3;6663:19;6231:699:43;6460:391:48;7612:94:43;7686:15;;7612:94;;8806:126;;;;;;:::i;:::-;;:::i;2216:490::-;;;;;;:::i;:::-;;:::i;6961:429::-;;;;;;:::i;:::-;;:::i;:::-;;;;8054:14:48;;8047:22;8029:41;;8113:14;;8106:22;8101:2;8086:18;;8079:50;8002:18;6961:429:43;7867:268:48;8476:136:43;;;;;;:::i;:::-;;:::i;1431:151:24:-;;;;;;:::i;:::-;;:::i;3021:145:23:-;;;;;;:::i;:::-;;:::i;7856:88:43:-;7928:11;;7856:88;;2153:49:23;;2198:4;2153:49;;1750:140:24;;;;;;:::i;:::-;;:::i;8358:88:43:-;8429:12;;8358:88;;8088:90;8160:13;;-1:-1:-1;;;;;8160:13:43;8088:90;;5354:147:23;;;;;;:::i;:::-;;:::i;8963:110:43:-;;;;;;:::i;:::-;;:::i;7421:160::-;;;;;;:::i;:::-;;:::i;634:212:24:-;719:4;-1:-1:-1;;;;;;742:57:24;;-1:-1:-1;;;742:57:24;;:97;;;803:36;827:11;803:23;:36::i;:::-;735:104;634:212;-1:-1:-1;;634:212:24:o;9104:159:43:-;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;9220:38:43::1;9241:16;9220:20;:38::i;:::-;9104:159:::0;;:::o;5326:375::-;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;5483:9:43;5509:24;;::::1;5505:55;;5542:18;;-1:-1:-1::0;;;5542:18:43::1;;;;;;;;;;;5505:55;5572:9;5567:130;5587:6;5583:1;:10;5567:130;;;5608:82;5638:7;;5646:1;5638:10;;;;;;;:::i;:::-;;;;;;;5654:9;;5664:1;5654:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;5682:5;5608:14;:82::i;:::-;-1:-1:-1::0;5595:3:43::1;;5567:130;;;;5460:241;5326:375:::0;;;;;:::o;4929:145:23:-;4578:7;4604:12;;;:6;:12;;;;;;;;:22;;2631:16;2642:4;2631:10;:16::i;:::-;5042:25:::1;5053:4;5059:7;5042:10;:25::i;:::-;4929:145:::0;;;:::o;183:75:44:-;234:19;250:2;234:15;:19::i;:::-;183:75;:::o;5732:468:43:-;-1:-1:-1;;;;;5826:21:43;;5791:4;5826:21;;;:15;:21;;;;;;;;5803:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5857:21;5803:44;14938:20;;;:25;;14851:117;5857:21;5853:54;;;-1:-1:-1;5895:5:43;;5732:468;-1:-1:-1;;5732:468:43:o;5853:54::-;5913:23;5938:27;5969:29;5991:6;5969:21;:29::i;:::-;5912:86;;-1:-1:-1;5912:86:43;-1:-1:-1;6005:15:43;12868:1;12846:23;;12828:41;;6004:79;;6089:20;6112:39;6131:19;13287:12;;13269:15;;13366:11;;13247:37;;:52;13344:33;13325:15;:52;;;13091:297;6112:39;6089:62;;6165:10;:30;;;;;6180:15;6179:16;6165:30;6158:37;5732:468;-1:-1:-1;;;;;;;5732:468:43:o;6038:214:23:-;-1:-1:-1;;;;;6133:23:23;;719:10:33;6133:23:23;6125:83;;;;-1:-1:-1;;;6125:83:23;;8727:2:48;6125:83:23;;;8709:21:48;8766:2;8746:18;;;8739:30;8805:34;8785:18;;;8778:62;-1:-1:-1;;;8856:18:48;;;8849:45;8911:19;;6125:83:23;;;;;;;;;6219:26;6231:4;6237:7;6219:11;:26::i;8209:118:43:-;8266:24;8305:17;8298:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8298:24:43;;;;;;;;;;;;;;;;;;;;;;8209:118;:::o;262:107:44:-;333:31;348:2;352:11;333:14;:31::i;8643:132:43:-;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;8737:33:43::1;8754:15;8737:16;:33::i;6231:699::-:0;-1:-1:-1;;;;;6447:21:43;;6312:26;6447:21;;;:15;:21;;;;;;;;6424:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6312:26;;;;;;6474:61;;6517:1;6520;6523;6526;6509:19;;;;;;;;;;;6474:61;6541:23;6566:27;6597:29;6619:6;6597:21;:29::i;:::-;6540:86;;-1:-1:-1;6540:86:43;-1:-1:-1;12868:1:43;12846:23;;12828:41;;6720:117;;;;6764:12;;;-1:-1:-1;6720:117:43;;;6818:12;;;-1:-1:-1;6720:117:43;6859:6;:20;;;6843:36;;6906:6;:19;;;6885:40;;6418:512;;;;6231:699;;;;;;:::o;8806:126::-;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;8897:30:43::1;8914:12;8897:16;:30::i;2216:490::-:0;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;3268:19:28::1;3291:13:::0;::::1;::::0;::::1;;;3290:14;::::0;3336:34;::::1;;;-1:-1:-1::0;3354:12:28::1;::::0;3369:1:::1;3354:12;::::0;;::::1;:16;3336:34;3335:97;;;-1:-1:-1::0;3404:4:28::1;1702:19:32::0;:23;;;3376:55:28::1;;-1:-1:-1::0;3414:12:28::1;::::0;::::1;;::::0;:17:::1;3376:55;3314:190;;;::::0;-1:-1:-1;;;3314:190:28;;9143:2:48;3314:190:28::1;::::0;::::1;9125:21:48::0;9182:2;9162:18;;;9155:30;9221:34;9201:18;;;9194:62;-1:-1:-1;;;9272:18:48;;;9265:44;9326:19;;3314:190:28::1;8941:410:48::0;3314:190:28::1;3514:12;:16:::0;;-1:-1:-1;;3514:16:28::1;3529:1;3514:16;::::0;;3540:65;::::1;;;3574:13;:20:::0;;-1:-1:-1;;3574:20:28::1;;;::::0;;3540:65:::1;2468:34:43::2;2487:14;2468:18;:34::i;:::-;2508:28;2526:9;2508:17;:28::i;:::-;2542;2559:10;2542:16;:28::i;:::-;2576:30;2593:12;2576:16;:30::i;:::-;2612:22;2625:8;2612:12;:22::i;:::-;2640:38;2661:16;;2640:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;::::2;;::::0;;::::2;::::0;::::2;::::0;::::2;:::i;:::-;;;;;;;;;;;;;;;;;:20;:38::i;:::-;2684:17;:15;:17::i;:::-;3629:14:28::1;3625:99;;;3675:5;3659:21:::0;;-1:-1:-1;;3659:21:28::1;::::0;;3699:14:::1;::::0;-1:-1:-1;9757:36:48;;3699:14:28::1;::::0;9745:2:48;9730:18;3699:14:28::1;;;;;;;3625:99;3258:472;2216:490:43::0;;;;;;;;:::o;6961:429::-;-1:-1:-1;;;;;7106:21:43;;7036:17;7106:21;;;:15;:21;;;;;;;;7083:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7036:17;;7133:63;;-1:-1:-1;7176:5:43;;;;-1:-1:-1;6961:429:43;-1:-1:-1;;6961:429:43:o;7133:63::-;7202:23;7227:27;7258:29;7280:6;7258:21;:29::i;:::-;12868:1;12846:23;;12828:41;;;12895:38;;;-1:-1:-1;7293:92:43;-1:-1:-1;;;;;6961:429:43:o;8476:136::-;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;8572:35:43::1;8590:16;8572:17;:35::i;1431:151:24:-:0;1521:7;1547:18;;;:12;:18;;;;;:28;;1569:5;1547:21;:28::i;:::-;1540:35;1431:151;-1:-1:-1;;;1431:151:24:o;3021:145:23:-;3107:4;3130:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;3130:29:23;;;;;;;;;;;;;;;3021:145::o;1750:140:24:-;1830:7;1856:18;;;:12;:18;;;;;:27;;:25;:27::i;5354:147:23:-;4578:7;4604:12;;;:6;:12;;;;;;;;:22;;2631:16;2642:4;2631:10;:16::i;:::-;5468:26:::1;5480:4;5486:7;5468:11;:26::i;8963:110:43:-:0;2198:4:23;2631:16;2198:4;2631:10;:16::i;:::-;9046:22:43::1;9059:8;9046:12;:22::i;7421:160::-:0;7498:26;7539:37;7560:15;7539:20;:37::i;2732:202:23:-;2817:4;-1:-1:-1;;;;;;2840:47:23;;-1:-1:-1;;;2840:47:23;;:87;;-1:-1:-1;;;;;;;;;;937:40:35;;;2891:36:23;829:155:35;3460:103:23;3526:30;3537:4;719:10:33;3526::23;:30::i;9331:603:43:-;9419:24;9426:17;;9419:24;:::i;:::-;9467:23;;9500:11;;;:48;;;9525:16;:23;9515:6;:33;;9500:48;9496:79;;;9557:18;;-1:-1:-1;;;9557:18:43;;;;;;;;;;;9496:79;9582:17;9605:16;9622:1;9605:19;;;;;;;;:::i;:::-;;;;;;;;;;;;9582:43;;;;;;;;-1:-1:-1;9582:43:43;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9582:43:43;;;-1:-1:-1;;;;;;9582:43:43;;;;;;;;;;;9632:246;9656:6;9652:1;:10;9632:246;;;9719:16;9736:5;9740:1;9736;:5;:::i;:::-;9719:23;;;;;;;;:::i;:::-;;;;;;;:38;;;9681:76;;:16;9698:1;9681:19;;;;;;;;:::i;:::-;;;;;;;:34;;;:76;;;9677:143;;9776:35;;-1:-1:-1;;;9776:35:43;;;;;;;;;;;9677:143;9828:17;9851:16;9868:1;9851:19;;;;;;;;:::i;:::-;;;;;;;;;;;;9828:43;;;;;;;;-1:-1:-1;9828:43:43;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9828:43:43;;;-1:-1:-1;;;;;;9828:43:43;;;;;;;;;;;9664:3;9632:246;;;;9889:40;9912:16;9889:40;;;;;;:::i;:::-;;;;;;;;9413:521;9331:603;:::o;15025:485::-;15118:22;15183:12;:36;;15203:11;15217:1;15203:15;15183:36;;;15198:1;15183:36;-1:-1:-1;;;;;15251:19:43;;15232:16;15251:19;;;:15;:19;;;;;15276:24;;;15324:15;15306;;;:33;15366:14;;;;15166:53;;-1:-1:-1;15251:19:43;15349:31;;15345:83;;;15390:14;;;:31;;;15345:83;15473:15;15457:14;15453:2;-1:-1:-1;;;;;15439:66:43;;15490:1;:14;;;15439:66;;;;2770:25:48;;2758:2;2743:18;;2624:177;15439:66:43;;;;;;;;15142:368;15025:485;;;;;:::o;1978:166:24:-;2065:31;2082:4;2088:7;2065:16;:31::i;:::-;2106:18;;;;:12;:18;;;;;:31;;2129:7;2106:22;:31::i;3082:766:43:-;-1:-1:-1;;;;;3157:19:43;;3134:20;3157:19;;;:15;:19;;;;;;;;;3134:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3182:130;;3247:12;;3217:74;;3265:2;3247:12;3217:14;:74::i;3182:130::-;3318:23;3343:27;3374:29;3396:6;3374:21;:29::i;:::-;13287:12;;13269:15;;13366:11;;3317:86;;-1:-1:-1;3317:86:43;;-1:-1:-1;12868:1:43;12846:23;;12828:41;;;12895:38;;;;13247:37;;:52;;;13344:33;13325:15;:52;;3585:55;;;;3613:27;;-1:-1:-1;;;3613:27:43;;;;;;;;;;;3585:55;-1:-1:-1;;;;;3650:16:43;;3656:10;3650:16;;;;:32;;;3670:12;3650:32;:52;;;;;3687:15;3686:16;3650:52;3646:110;;;3719:30;;-1:-1:-1;;;3719:30:43;;;;;;;;;;;3646:110;3792:12;;3762:81;;3810:2;3828:12;3762:14;:81::i;:::-;;3128:720;;;;;;3082:766;:::o;13492:282::-;13580:23;13605:27;13660:38;13682:15;13660:21;:38::i;:::-;13642:56;;13726:43;13748:6;:20;;;13726:21;:43::i;:::-;13704:65;;13492:282;;;:::o;2233:171:24:-;2321:32;2339:4;2345:7;2321:17;:32::i;:::-;2363:18;;;;:12;:18;;;;;:34;;2389:7;2363:25;:34::i;4299:996:43:-;-1:-1:-1;;;;;4394:19:43;;4371:20;4394:19;;;:15;:19;;;;;;;;;4371:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4419:74;;4461:25;;-1:-1:-1;;;4461:25:43;;;;;;;;;;;4419:74;4524:12;;4498:23;4546:20;;;4542:57;;4575:24;;-1:-1:-1;;;4575:24:43;;;;;;;;;;;4542:57;4607:23;4632:27;4663:29;4685:6;4663:21;:29::i;:::-;4606:86;;-1:-1:-1;4606:86:43;-1:-1:-1;12868:1:43;12846:23;;12828:41;;;4786:43;;4812:17;;-1:-1:-1;;;4812:17:43;;;;;;;;;;;4786:43;4836:20;4859:39;4878:19;13287:12;;13269:15;;13366:11;;13247:37;;:52;13344:33;13325:15;:52;;;13091:297;4859:39;4836:62;;4908:15;4904:48;;;4932:20;;-1:-1:-1;;;4932:20:43;;;;;;;;;;;4904:48;4959:77;4989:15;5010:2;5028:5;4959:14;:77::i;:::-;;5074:26;5109:92;5157:15;5187:11;5109:28;:92::i;:::-;5074:127;;5249:6;:20;;;5232:15;5228:2;-1:-1:-1;;;;;5213:77:43;;5271:18;5213:77;;;;2770:25:48;;2758:2;2743:18;;2624:177;5213:77:43;;;;;;;;4365:930;;;;;;;4299:996;;:::o;9984:139::-;10047:11;:26;;;10085:33;;2770:25:48;;;10085:33:43;;2758:2:48;2743:18;10085:33:43;;;;;;;;9984:139;:::o;10168:141::-;10231:13;:28;;-1:-1:-1;;;;;;10231:28:43;-1:-1:-1;;;;;10231:28:43;;;;;;;;10271:33;;5954:51:48;;;10271:33:43;;5942:2:48;5927:18;10271:33:43;5808:203:48;13938:217:43;14009:14;14027:1;14009:19;14005:58;;14037:26;;-1:-1:-1;;;14037:26:43;;;;;;;;;;;14005:58;14070:15;:32;;;14113:37;;2770:25:48;;;14113:37:43;;2758:2:48;2743:18;14113:37:43;2624:177:48;14200:218:43;14286:15;;14269:13;:32;14265:70;;14310:25;;-1:-1:-1;;;14310:25:43;;;;;;;;;;;14265:70;14341:10;:26;;;14378:35;;2770:25:48;;;14378:35:43;;2758:2:48;2743:18;14378:35:43;2624:177:48;10349:117:43;10404:9;:20;;-1:-1:-1;;;;;;10404:20:43;-1:-1:-1;;;;;10404:20:43;;;;;;;;10436:25;;5954:51:48;;;10436:25:43;;5942:2:48;5927:18;10436:25:43;5808:203:48;10506:366:43;10653:15;;10635:33;;:15;:33;:::i;:::-;10620:12;:48;;;10752:1;;10736:12;;:17;;10752:1;;10736:17;:::i;:::-;;;;-1:-1:-1;;10775:15:43;;10759:12;:31;;:12;;:31;;10775:15;;10759:31;:::i;:::-;;;;-1:-1:-1;;10813:10:43;;10797:12;:26;;:12;;:26;;10813:10;;10797:26;:::i;:::-;;;;-1:-1:-1;;10854:12:43;;10835:32;;2770:25:48;;;10835:32:43;;2758:2:48;2743:18;10835:32:43;;;;;;;10506:366::o;9563:156:39:-;9637:7;9687:22;9691:3;9703:5;9687:3;:22::i;9106:115::-;9169:7;9195:19;9203:3;4545:18;;4463:107;11541:874:43;11619:26;11653:37;11693:17;11653:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11653:57:43;;;;;;;;;;;;;;;;-1:-1:-1;;11733:19:43;;11653:57;;-1:-1:-1;;;11716:14:43;11878:11;;;11874:25;;-1:-1:-1;11898:1:43;;11541:874;-1:-1:-1;;;11541:874:43:o;11874:25::-;12116:9;12128:10;12137:1;12128:6;:10;:::i;:::-;12116:22;;12111:300;12184:12;12197:1;12184:15;;;;;;;;:::i;:::-;;;;;;;:30;;;12165:49;;:15;:49;12161:146;;12255:12;12268:1;12255:15;;;;;;;;:::i;:::-;;;;;;;:27;;;-1:-1:-1;;;;;12247:36:43;12226:57;;12293:5;;12161:146;12387:17;;12399:5;12387:17;12148:3;;;:::i;:::-;;;12111:300;;;;11647:768;;11541:874;;;:::o;3844:479:23:-;3932:22;3940:4;3946:7;3932;:22::i;:::-;3927:390;;4115:28;4135:7;4115:19;:28::i;:::-;4214:38;4242:4;4249:2;4214:19;:38::i;:::-;4022:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4022:252:23;;;;;;;;;;-1:-1:-1;;;3970:336:23;;;;;;;:::i;7587:233::-;7670:22;7678:4;7684:7;7670;:22::i;:::-;7665:149;;7708:12;;;;7740:4;7708:12;;;;;;;;-1:-1:-1;;;;;7708:29:23;;;;;;;;;;:36;;-1:-1:-1;;7708:36:23;;;;;;;7763:40;;719:10:33;;7708:12:23;;7763:40;;7708:12;7763:40;7587:233;;:::o;8305:150:39:-;8375:4;8398:50;8403:3;-1:-1:-1;;;;;8423:23:39;;8398:4;:50::i;14619:189:43:-;14692:20;14782:15;;14766:12;;14754:9;:24;14753:44;;;;;:::i;:::-;;;14619:189;-1:-1:-1;;14619:189:43:o;7991:234:23:-;8074:22;8082:4;8088:7;8074;:22::i;:::-;8070:149;;;8144:5;8112:12;;;:6;:12;;;;;;;;-1:-1:-1;;;;;8112:29:23;;;;;;;;;;:37;;-1:-1:-1;;8112:37:23;;;8168:40;719:10:33;;8112:12:23;;8168:40;;8144:5;8168:40;7991:234;;:::o;8623:156:39:-;8696:4;8719:53;8727:3;-1:-1:-1;;;;;8747:23:39;;8719:7;:53::i;10983:486:43:-;11093:26;11150:37;11171:15;11150:20;:37::i;:::-;11129:58;-1:-1:-1;11240:54:43;;11269:25;11240:54;11326:11;11305:18;:32;11301:84;;;11354:24;;-1:-1:-1;;;11354:24:43;;;;;;;;;;;11301:84;11434:9;;11391:13;;:73;;-1:-1:-1;;;;;11391:13:43;;;;11422:10;;11434:9;11445:18;11391:30;:73::i;4912:118:39:-;4979:7;5005:3;:11;;5017:5;5005:18;;;;;;;;:::i;:::-;;;;;;;;;4998:25;;4912:118;;;;:::o;2407:149:34:-;2465:13;2497:52;-1:-1:-1;;;;;2509:22:34;;343:2;1818:437;1893:13;1918:19;1950:10;1954:6;1950:1;:10;:::i;:::-;:14;;1963:1;1950:14;:::i;:::-;1940:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1940:25:34;;1918:47;;-1:-1:-1;;;1975:6:34;1982:1;1975:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1975:15:34;;;;;;;;;-1:-1:-1;;;2000:6:34;2007:1;2000:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2000:15:34;;;;;;;;-1:-1:-1;2030:9:34;2042:10;2046:6;2042:1;:10;:::i;:::-;:14;;2055:1;2042:14;:::i;:::-;2030:26;;2025:128;2062:1;2058;:5;2025:128;;;-1:-1:-1;;;2105:5:34;2113:3;2105:11;2096:21;;;;;;;:::i;:::-;;;;2084:6;2091:1;2084:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2084:33:34;;;;;;;;-1:-1:-1;2141:1:34;2131:11;;;;;2065:3;;;:::i;:::-;;;2025:128;;;-1:-1:-1;2170:10:34;;2162:55;;;;-1:-1:-1;;;2162:55:34;;12542:2:48;2162:55:34;;;12524:21:48;;;12561:18;;;12554:30;12620:34;12600:18;;;12593:62;12672:18;;2162:55:34;12340:356:48;2214:404:39;2277:4;4351:19;;;:12;;;:19;;;;;;2293:319;;-1:-1:-1;2335:23:39;;;;;;;;:11;:23;;;;;;;;;;;;;2515:18;;2493:19;;;:12;;;:19;;;;;;:40;;;;2547:11;;2293:319;-1:-1:-1;2596:5:39;2589:12;;2786:1388;2852:4;2989:19;;;:12;;;:19;;;;;;3023:15;;3019:1149;;3392:21;3416:14;3429:1;3416:10;:14;:::i;:::-;3464:18;;3392:38;;-1:-1:-1;3444:17:39;;3464:22;;3485:1;;3464:22;:::i;:::-;3444:42;;3518:13;3505:9;:26;3501:398;;3551:17;3571:3;:11;;3583:9;3571:22;;;;;;;;:::i;:::-;;;;;;;;;3551:42;;3722:9;3693:3;:11;;3705:13;3693:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;3805:23;;;:12;;;:23;;;;;:36;;;3501:398;3977:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;4069:3;:12;;:19;4082:5;4069:19;;;;;;;;;;;4062:26;;;4110:4;4103:11;;;;;;;3019:1149;4152:5;4145:12;;;;;378:784:46;534:126;;;-1:-1:-1;;;;;13091:15:48;;;534:126:46;;;13073:34:48;13143:15;;;13123:18;;;13116:43;13175:18;;;;13168:34;;;534:126:46;;;;;;;;;;13008:18:48;;;;534:126:46;;;;;;;-1:-1:-1;;;;;534:126:46;-1:-1:-1;;;534:126:46;;;515:151;;-1:-1:-1;;;;515:11:46;;;;:151;;534:126;515:151;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;479:187;;;;678:7;677:8;:59;;;-1:-1:-1;691:11:46;;:16;;:44;;;722:4;711:24;;;;;;;;;;;;:::i;:::-;689:47;677:59;673:485;;;871:40;899:6;-1:-1:-1;;;;;871:40:46;908:2;871:19;:40::i;:::-;947:39;975:5;-1:-1:-1;;;;;947:39:46;983:2;947:19;:39::i;:::-;1020:37;1048:3;-1:-1:-1;;;;;1020:37:46;1054:2;1020:19;:37::i;:::-;1094:27;1114:6;1094:19;:27::i;:::-;780:353;;;;;;;;;;;:::i;673:485::-;473:689;;378:784;;;;:::o;1521:174:34:-;1580:13;1636:42;1648:5;1655:18;1667:5;1655:11;:18::i;:::-;1676:1;1655:22;1636:11;:42::i;11708:663:37:-;11762:7;;11846:3;11837:12;;;:16;11833:98;;11883:3;11873:13;;;;;11914:2;11904:12;11833:98;11957:2;11948:11;;;:15;11944:95;;11993:2;11983:12;;;;;12023:1;12013:11;11944:95;12065:2;12056:11;;;:15;12052:95;;12101:2;12091:12;;;;;12131:1;12121:11;12052:95;12173:2;12164:11;;;:15;12160:95;;12209:2;12199:12;;;;;12239:1;12229:11;12160:95;12281:1;12272:10;;;:14;12268:64;;12316:1;12306:11;12358:6;11708:663;-1:-1:-1;;11708:663:37:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:286:48:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:48;;209:43;;199:71;;266:1;263;256:12;497:127;558:10;553:3;549:20;546:1;539:31;589:4;586:1;579:15;613:4;610:1;603:15;629:275;700:2;694:9;765:2;746:13;;-1:-1:-1;;742:27:48;730:40;;800:18;785:34;;821:22;;;782:62;779:88;;;847:18;;:::i;:::-;883:2;876:22;629:275;;-1:-1:-1;629:275:48:o;909:706::-;971:5;1019:4;1007:9;1002:3;998:19;994:30;991:50;;;1037:1;1034;1027:12;991:50;1070:4;1064:11;1114:4;1106:6;1102:17;1185:6;1173:10;1170:22;1149:18;1137:10;1134:34;1131:62;1128:88;;;1196:18;;:::i;:::-;1232:4;1225:24;1267:6;-1:-1:-1;1267:6:48;1297:23;;1364:10;1351:24;;1339:37;;1329:65;;1390:1;1387;1380:12;1329:65;1403:23;;1478:2;1463:18;;1450:32;-1:-1:-1;;;;;1513:36:48;;1501:49;;1491:77;;1564:1;1561;1554:12;1491:77;1596:2;1584:15;;;;1577:32;909:706;;-1:-1:-1;;909:706:48:o;1620:999::-;1738:6;1769:2;1812;1800:9;1791:7;1787:23;1783:32;1780:52;;;1828:1;1825;1818:12;1780:52;1868:9;1855:23;1897:18;1938:2;1930:6;1927:14;1924:34;;;1954:1;1951;1944:12;1924:34;1992:6;1981:9;1977:22;1967:32;;2037:7;2030:4;2026:2;2022:13;2018:27;2008:55;;2059:1;2056;2049:12;2008:55;2095:2;2082:16;2117:2;2113;2110:10;2107:36;;;2123:18;;:::i;:::-;2163:36;2195:2;2190;2187:1;2183:10;2179:19;2163:36;:::i;:::-;2233:15;;;2264:12;;;;-1:-1:-1;2315:1:48;2311:10;;;;2303:19;;2299:28;;;2339:19;;;2336:39;;;2371:1;2368;2361:12;2336:39;2395:11;;;;2415:174;2431:6;2426:3;2423:15;2415:174;;;2499:47;2538:7;2533:3;2499:47;:::i;:::-;2494:3;2487:60;2576:2;2571:3;2567:12;2560:19;;2457:4;2452:3;2448:14;2441:21;;2415:174;;2806:367;2869:8;2879:6;2933:3;2926:4;2918:6;2914:17;2910:27;2900:55;;2951:1;2948;2941:12;2900:55;-1:-1:-1;2974:20:48;;3017:18;3006:30;;3003:50;;;3049:1;3046;3039:12;3003:50;3086:4;3078:6;3074:17;3062:29;;3146:3;3139:4;3129:6;3126:1;3122:14;3114:6;3110:27;3106:38;3103:47;3100:67;;;3163:1;3160;3153:12;3100:67;2806:367;;;;;:::o;3178:773::-;3300:6;3308;3316;3324;3377:2;3365:9;3356:7;3352:23;3348:32;3345:52;;;3393:1;3390;3383:12;3345:52;3433:9;3420:23;3462:18;3503:2;3495:6;3492:14;3489:34;;;3519:1;3516;3509:12;3489:34;3558:70;3620:7;3611:6;3600:9;3596:22;3558:70;:::i;:::-;3647:8;;-1:-1:-1;3532:96:48;-1:-1:-1;3735:2:48;3720:18;;3707:32;;-1:-1:-1;3751:16:48;;;3748:36;;;3780:1;3777;3770:12;3748:36;;3819:72;3883:7;3872:8;3861:9;3857:24;3819:72;:::i;:::-;3178:773;;;;-1:-1:-1;3910:8:48;-1:-1:-1;;;;3178:773:48:o;3956:180::-;4015:6;4068:2;4056:9;4047:7;4043:23;4039:32;4036:52;;;4084:1;4081;4074:12;4036:52;-1:-1:-1;4107:23:48;;3956:180;-1:-1:-1;3956:180:48:o;4323:173::-;4391:20;;-1:-1:-1;;;;;4440:31:48;;4430:42;;4420:70;;4486:1;4483;4476:12;4420:70;4323:173;;;:::o;4501:254::-;4569:6;4577;4630:2;4618:9;4609:7;4605:23;4601:32;4598:52;;;4646:1;4643;4636:12;4598:52;4682:9;4669:23;4659:33;;4711:38;4745:2;4734:9;4730:18;4711:38;:::i;:::-;4701:48;;4501:254;;;;;:::o;4760:186::-;4819:6;4872:2;4860:9;4851:7;4847:23;4843:32;4840:52;;;4888:1;4885;4878:12;4840:52;4911:29;4930:9;4911:29;:::i;4951:852::-;5190:2;5242:21;;;5312:13;;5215:18;;;5334:22;;;5161:4;;5190:2;5375;;5393:18;;;;5434:15;;;5161:4;5477:300;5491:6;5488:1;5485:13;5477:300;;;5550:13;;5592:9;;5603:10;5588:26;5576:39;;5659:11;;5653:18;-1:-1:-1;;;;;5649:47:48;5635:12;;;5628:69;5717:12;;;;5752:15;;;;5513:1;5506:9;5477:300;;;-1:-1:-1;5794:3:48;;4951:852;-1:-1:-1;;;;;;;4951:852:48:o;6016:254::-;6084:6;6092;6145:2;6133:9;6124:7;6120:23;6116:32;6113:52;;;6161:1;6158;6151:12;6113:52;6184:29;6203:9;6184:29;:::i;:::-;6174:39;6260:2;6245:18;;;;6232:32;;-1:-1:-1;;;6016:254:48:o;6856:1006::-;7023:6;7031;7039;7047;7055;7063;7071;7124:3;7112:9;7103:7;7099:23;7095:33;7092:53;;;7141:1;7138;7131:12;7092:53;7177:9;7164:23;7154:33;;7234:2;7223:9;7219:18;7206:32;7196:42;;7285:2;7274:9;7270:18;7257:32;7247:42;;7308:38;7342:2;7331:9;7327:18;7308:38;:::i;:::-;7298:48;;7365:39;7399:3;7388:9;7384:19;7365:39;:::i;:::-;7355:49;;7455:3;7444:9;7440:19;7427:33;7479:18;7520:2;7512:6;7509:14;7506:34;;;7536:1;7533;7526:12;7506:34;7574:6;7563:9;7559:22;7549:32;;7619:7;7612:4;7608:2;7604:13;7600:27;7590:55;;7641:1;7638;7631:12;7590:55;7681:2;7668:16;7707:2;7699:6;7696:14;7693:34;;;7723:1;7720;7713:12;7693:34;7776:7;7771:2;7761:6;7758:1;7754:14;7750:2;7746:23;7742:32;7739:45;7736:65;;;7797:1;7794;7787:12;7736:65;7828:2;7824;7820:11;7810:21;;7850:6;7840:16;;;;;6856:1006;;;;;;;;;;:::o;8140:248::-;8208:6;8216;8269:2;8257:9;8248:7;8244:23;8240:32;8237:52;;;8285:1;8282;8275:12;8237:52;-1:-1:-1;;8308:23:48;;;8378:2;8363:18;;;8350:32;;-1:-1:-1;8140:248:48:o;8393:127::-;8454:10;8449:3;8445:20;8442:1;8435:31;8485:4;8482:1;8475:15;8509:4;8506:1;8499:15;9356:244;9449:6;9502:2;9490:9;9481:7;9477:23;9473:32;9470:52;;;9518:1;9515;9508:12;9470:52;9541:53;9586:7;9575:9;9541:53;:::i;9804:127::-;9865:10;9860:3;9856:20;9853:1;9846:31;9896:4;9893:1;9886:15;9920:4;9917:1;9910:15;9936:128;10003:9;;;10024:11;;;10021:37;;;10038:18;;:::i;10069:127::-;10130:10;10125:3;10121:20;10118:1;10111:31;10161:4;10158:1;10151:15;10185:4;10182:1;10175:15;10201:217;10241:1;10267;10257:132;;10311:10;10306:3;10302:20;10299:1;10292:31;10346:4;10343:1;10336:15;10374:4;10371:1;10364:15;10257:132;-1:-1:-1;10403:9:48;;10201:217::o;10423:168::-;10496:9;;;10527;;10544:15;;;10538:22;;10524:37;10514:71;;10565:18;;:::i;10596:125::-;10661:9;;;10682:10;;;10679:36;;;10695:18;;:::i;10726:136::-;10765:3;10793:5;10783:39;;10802:18;;:::i;:::-;-1:-1:-1;;;10838:18:48;;10726:136::o;10867:250::-;10952:1;10962:113;10976:6;10973:1;10970:13;10962:113;;;11052:11;;;11046:18;11033:11;;;11026:39;10998:2;10991:10;10962:113;;;-1:-1:-1;;11109:1:48;11091:16;;11084:27;10867:250::o;11122:812::-;11533:25;11528:3;11521:38;11503:3;11588:6;11582:13;11604:75;11672:6;11667:2;11662:3;11658:12;11651:4;11643:6;11639:17;11604:75;:::i;:::-;-1:-1:-1;;;11738:2:48;11698:16;;;11730:11;;;11723:40;11788:13;;11810:76;11788:13;11872:2;11864:11;;11857:4;11845:17;;11810:76;:::i;:::-;11906:17;11925:2;11902:26;;11122:812;-1:-1:-1;;;;11122:812:48:o;11939:396::-;12088:2;12077:9;12070:21;12051:4;12120:6;12114:13;12163:6;12158:2;12147:9;12143:18;12136:34;12179:79;12251:6;12246:2;12235:9;12231:18;12226:2;12218:6;12214:15;12179:79;:::i;:::-;12319:2;12298:15;-1:-1:-1;;12294:29:48;12279:45;;;;12326:2;12275:54;;11939:396;-1:-1:-1;;11939:396:48:o;12701:127::-;12762:10;12757:3;12753:20;12750:1;12743:31;12793:4;12790:1;12783:15;12817:4;12814:1;12807:15;13213:287;13342:3;13380:6;13374:13;13396:66;13455:6;13450:3;13443:4;13435:6;13431:17;13396:66;:::i;:::-;13478:16;;;;;13213:287;-1:-1:-1;;13213:287:48:o;13505:277::-;13572:6;13625:2;13613:9;13604:7;13600:23;13596:32;13593:52;;;13641:1;13638;13631:12;13593:52;13673:9;13667:16;13726:5;13719:13;13712:21;13705:5;13702:32;13692:60;;13748:1;13745;13738:12;13787:1539;14496:34;14491:3;14484:47;-1:-1:-1;;;14556:2:48;14551:3;14547:12;14540:37;14466:3;14606:6;14600:13;14622:73;14688:6;14683:2;14678:3;14674:12;14669:2;14661:6;14657:15;14622:73;:::i;:::-;-1:-1:-1;;;14754:2:48;14714:16;;;14746:11;;;14739:29;14793:13;;14815:74;14793:13;14875:2;14867:11;;14862:2;14850:15;;14815:74;:::i;:::-;-1:-1:-1;;;14949:2:48;14908:17;;;;14941:11;;;14934:27;14986:13;;15008:74;14986:13;15068:2;15060:11;;15055:2;15043:15;;15008:74;:::i;:::-;-1:-1:-1;;;15142:2:48;15101:17;;;;15134:11;;;15127:30;15182:13;;15204:74;15182:13;15264:2;15256:11;;15251:2;15239:15;;15204:74;:::i;:::-;15298:17;15317:2;15294:26;;13787:1539;-1:-1:-1;;;;;;13787:1539:48:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "DEFAULT_ADMIN_ROLE()": "a217fddf",
    "activateStreak(address)": "31711309",
    "forceRestoreStreak(address[],uint256[])": "199fef65",
    "getActivationStatus(address)": "6d16c15b",
    "getAllRestorationCosts()": "36cee514",
    "getFreezePeriod()": "9fe4f9d6",
    "getInitialTime()": "d0b294da",
    "getPaymentToken()": "d41c3a65",
    "getResetDuration()": "1614252f",
    "getRestorationCosts(uint256)": "fc44e00b",
    "getRoleAdmin(bytes32)": "248a9ca3",
    "getRoleMember(bytes32,uint256)": "9010d07c",
    "getRoleMemberCount(bytes32)": "ca15c873",
    "getStreak(address)": "5eeadb0d",
    "getStreakLifeTime()": "64c02908",
    "getTreasury()": "3b19e84a",
    "grantRole(bytes32,address)": "2f2ff15d",
    "hasRole(bytes32,address)": "91d14854",
    "initialize(uint256,uint256,uint256,address,address,(uint32,uint80)[])": "6c7976d5",
    "isRestorable(address)": "333ebe12",
    "renounceRole(bytes32,address)": "36568abe",
    "restoreStreak(address,uint256)": "43afef80",
    "revokeRole(bytes32,address)": "d547741f",
    "setFreezePeriod(uint256)": "57120165",
    "setPaymentToken(address)": "6a326ab1",
    "setResetDuration(uint256)": "886ce65c",
    "setRestorationCosts((uint32,uint80)[])": "07a4f002",
    "setTreasury(address)": "f0f44260",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrAlreadyActivatedStreak\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrCallerNotDelegated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrFreezeTimeEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidOrderOfRestorationCosts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidResetDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidStreakLifeTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNewUserCannotRestore\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrNoLostStreak\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrStartNewStreakByDelegatee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrZeroLostStreakCount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prayer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"syncedDayIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"countPerDay\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct ICheckin.CheckerCountInfo\",\"name\":\"prayerCountInfo\",\"type\":\"tuple\"}],\"name\":\"CheckerCountSynced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFreezePeriod\",\"type\":\"uint256\"}],\"name\":\"FreezePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"InitialTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPaymentToken\",\"type\":\"address\"}],\"name\":\"PaymentTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newResetDuration\",\"type\":\"uint256\"}],\"name\":\"ResetDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"lowerMilestone\",\"type\":\"uint32\"},{\"internalType\":\"uint80\",\"name\":\"costInToken\",\"type\":\"uint80\"}],\"indexed\":false,\"internalType\":\"struct ICheckin.RestorationCost[]\",\"name\":\"newRestorationCosts\",\"type\":\"tuple[]\"}],\"name\":\"RestorationCostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"streakLifeTime\",\"type\":\"uint256\"}],\"name\":\"StreakLifeTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"restoredStreakCount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costInPaymentToken\",\"type\":\"uint256\"}],\"name\":\"StreakRestored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLastUpdated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longestStreakCount\",\"type\":\"uint256\"}],\"name\":\"StreakUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"activateStreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"streaks\",\"type\":\"uint256[]\"}],\"name\":\"forceRestoreStreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getActivationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isLostStreak\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasCheckedToday\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRestorationCosts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"lowerMilestone\",\"type\":\"uint32\"},{\"internalType\":\"uint80\",\"name\":\"costInToken\",\"type\":\"uint80\"}],\"internalType\":\"struct ICheckin.RestorationCost[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreezePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResetDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lostStreakCount\",\"type\":\"uint256\"}],\"name\":\"getRestorationCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"costInPaymentToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStreak\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStreakCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActivated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"longestStreakCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lostStreakCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreakLifeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streakLifeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"lowerMilestone\",\"type\":\"uint32\"},{\"internalType\":\"uint80\",\"name\":\"costInToken\",\"type\":\"uint80\"}],\"internalType\":\"struct ICheckin.RestorationCost[]\",\"name\":\"restorationCosts\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isRestorable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"restoreStreak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFreezePeriod\",\"type\":\"uint256\"}],\"name\":\"setFreezePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newResetDuration\",\"type\":\"uint256\"}],\"name\":\"setResetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"lowerMilestone\",\"type\":\"uint32\"},{\"internalType\":\"uint80\",\"name\":\"costInToken\",\"type\":\"uint80\"}],\"internalType\":\"struct ICheckin.RestorationCost[]\",\"name\":\"restorationCosts\",\"type\":\"tuple[]\"}],\"name\":\"setRestorationCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ErrAlreadyActivatedStreak()\":[{\"details\":\"Error when streak is still active.\"}],\"ErrCallerNotDelegated()\":[{\"details\":\"Revert when the caller is not delegated by the address `to`.\"}],\"ErrFreezeTimeEnded()\":[{\"details\":\"Revert when the freeze time period has already ended.\"}],\"ErrInsufficientPayment()\":[{\"details\":\"Revert when the amount acceptable is insufficient for restoration.\"}],\"ErrInvalidLength()\":[{\"details\":\"Revert when length of input arrays are mismatch.\"}],\"ErrInvalidOrderOfRestorationCosts()\":[{\"details\":\"Revert when the order of restoration cost array is not ascending based on 'lowerMilestone'.\"}],\"ErrInvalidResetDuration()\":[{\"details\":\"Error when the reset duration is larger than the streak lifetime.\"}],\"ErrInvalidStreakLifeTime()\":[{\"details\":\"Error when streak lifetime is invalid e.g. when streak lifetime is 0.\"}],\"ErrNoLostStreak()\":[{\"details\":\"Revert when there is no lost streak to restore.\"}],\"ErrStartNewStreakByDelegatee()\":[{\"details\":\"Revert when delegatee attempts start new streak for delegator.\"}],\"ErrZeroLostStreakCount()\":[{\"details\":\"Revert when attempting to restore a streak, but the last streak count is 0.\"}]},\"events\":{\"CheckerCountSynced(address,(uint64,uint64))\":{\"details\":\"Emitted when the prayer count synced daily.\"},\"FreezePeriodUpdated(uint256)\":{\"details\":\"Emitted when the freeze period is updated.\"},\"InitialTimeUpdated(uint256)\":{\"details\":\"Emitted when the initial time is updated.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"PaymentTokenUpdated(address)\":{\"details\":\"Emitted when payment token is updated.\"},\"ResetDurationUpdated(uint256)\":{\"details\":\"Emitted when the reset steak duration is updated.\"},\"RestorationCostUpdated((uint32,uint80)[])\":{\"details\":\"Emitted when the restoration cost is updated.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"StreakLifeTimeChanged(uint256)\":{\"details\":\"Emitted when active streak lifetime duration is updated.\"},\"StreakRestored(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when the daily streak of an address of is updated.\"},\"StreakUpdated(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when the daily streak of an address of is updated.\"},\"TreasuryUpdated(address)\":{\"details\":\"Emitted when treasury is updated.\"}},\"kind\":\"dev\",\"methods\":{\"forceRestoreStreak(address[],uint256[])\":{\"details\":\"Restore streak amount. Requirements: - The caller must be default admin.\"},\"getActivationStatus(address)\":{\"details\":\"Get the activation status of `user`.\",\"returns\":{\"hasCheckedToday\":\"Indicates whether the address `user` has prayed today.\",\"isLostStreak\":\"Indicates whether the streak is lost.\"}},\"getAllRestorationCosts()\":{\"details\":\"Returns all the cost in usd according to the lower milestones.\"},\"getFreezePeriod()\":{\"details\":\"Returns the freeze period in timestamp for restoration.\"},\"getInitialTime()\":{\"details\":\"Returns the Initail Time calculated based on the UTC.\"},\"getPaymentToken()\":{\"details\":\"Returns the address of token of restoration fee.\"},\"getResetDuration()\":{\"details\":\"Returns the reset duration calculated based on the UTC.\"},\"getRestorationCosts(uint256)\":{\"details\":\"Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getStreak(address)\":{\"details\":\"Returns streak info including amount and last update timestamp of sender.\",\"returns\":{\"currentStreakCount\":\"The current streak count, equal to zero whether streak is lost.\",\"lastActivated\":\"The last pray timestamp.\",\"longestStreakCount\":\"The longest streak count, only affected from upgrading V3.\",\"lostStreakCount\":\"The lost streak count, equal to zero whether streak is still alive.\"}},\"getStreakLifeTime()\":{\"details\":\"Returns active streak life time.\"},\"getTreasury()\":{\"details\":\"Returns the address treasury where receive the restoration fee.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isRestorable(address)\":{\"details\":\"Return the restorable of `user`'s lost streak.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setFreezePeriod(uint256)\":{\"details\":\"Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event.\"},\"setPaymentToken(address)\":{\"details\":\"Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event.\"},\"setResetDuration(uint256)\":{\"details\":\"Set new reset duration for streak.\",\"params\":{\"newResetDuration\":\"The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event.\"}},\"setRestorationCosts((uint32,uint80)[])\":{\"details\":\"Update the cost for restoration. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. - The array `restorationCost` must be sorted as ascending by `lowerMilestone`. Emits {RestorationCostUpdated} event.\"},\"setTreasury(address)\":{\"details\":\"Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CheckinMock.sol\":\"CheckinMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":@fdk/=lib/foundry-deployment-kit/script/\",\":@openzeppelin/contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":@solady/=lib/foundry-deployment-kit/lib/solady/src/\",\":contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/\",\":ds-test/=lib/foundry-deployment-kit/lib/solady/lib/ds-test/src/\",\":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/foundry-deployment-kit/lib/forge-std/src/\",\":foundry-deployment-kit/=lib/foundry-deployment-kit/\",\":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/\",\":solady/=lib/foundry-deployment-kit/lib/solady/\"]},\"sources\":{\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/BaseCheckin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { ICheckin } from \\\"./interfaces/ICheckin.sol\\\";\\nimport { TransferFromHelper } from \\\"./utils/transfers/TransferFromHelper.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { AccessControlEnumerable } from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nabstract contract BaseCheckin is Initializable, AccessControlEnumerable, ICheckin {\\n  using TransferFromHelper for address;\\n  /**\\n   * @notice The streak lifetime in second(s).\\n   * @dev This variable will NOT be updated after initializing because of affecting to all current active streaks.\\n   */\\n\\n  uint256 internal _initialTime;\\n  uint256 internal _streakLifeTime;\\n  mapping(address => Streak) internal _usersStreakMap;\\n  /**\\n   * @notice The reset duration in second(s).\\n   * @dev This reset duration is calculated based on the UTC.\\n   */\\n  uint256 internal _resetTime;\\n\\n  /**\\n   * @dev Defines the duration in which lost streaks can be restored.\\n   * Users have the opportunity to restore lost streaks during this freeze period after the day they were lost.\\n   */\\n  uint256 internal _freezeTime;\\n\\n  /// @dev The address for receiving restoration cost.\\n  address internal _treasury;\\n  /// @dev The address that paid to restore the lost streak.\\n  address internal _paymentToken;\\n\\n  /**\\n   * @dev Store array of cost for restoration base on the lower bound of lost streak ranges.\\n   * The cost is pegged in `_paymentToken`.\\n   *\\n   * The below example table describes the cost to restore the lost streak.\\n   *\\n   * |  lost streak range  |  lower bound  |  fee in Token |\\n   * | ------------------- | ------------- | ------------- |\\n   * | 01 - 10             | 01            | 1             |\\n   * | 11 - 20             | 11            | 3             |\\n   * | 21 - 50             | 21            | 6             |\\n   * | 51 - 99             | 51            | 10            |\\n   * | 100+                | 100           | 15            |\\n   */\\n  RestorationCost[] internal _restorationCosts;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n  }\\n\\n  function initialize(\\n    uint256 streakLifeTime,\\n    uint256 resetTime,\\n    uint256 freezeTime,\\n    address paymentToken,\\n    address treasury,\\n    RestorationCost[] calldata restorationCosts\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) initializer {\\n    _setStreakLifeTime(streakLifeTime);\\n    _setResetDuration(resetTime);\\n    _setFreezePeriod(freezeTime);\\n    _setPaymentToken(paymentToken);\\n    _setTreasury(treasury);\\n    _setRestorationCosts(restorationCosts);\\n    _setInitialTime();\\n  }\\n\\n  /**\\n   * @dev Activate the streak for address `to`.\\n   * @param to Address for activating streak.\\n   *\\n   * Requirements:\\n   * - Revert when activating before the allowed activation block.\\n   * - Revert when streak is still active.\\n   * - If caller is different from address to, caller must be delegated by address `to`.\\n   *\\n   * Emits the {StreakUpdated} event.\\n   */\\n  function _activateStreak(address to) internal {\\n    Streak memory streak = _usersStreakMap[to];\\n    if (_checkNewUser(streak)) {\\n      _unsafeCheckin({ streakCount: streak.count, to: to, isLostStreak: false });\\n      return;\\n    }\\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\\n    (bool isLostStreak, bool hasCheckedToday) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\\n    bool freezeTimeEnded = _isFreezeTimeEnded(lastCheckedDayIndex);\\n    if (hasCheckedToday) revert ErrAlreadyActivatedStreak();\\n    if (to != msg.sender && isLostStreak && !freezeTimeEnded) {\\n      revert ErrStartNewStreakByDelegatee();\\n    }\\n\\n    _unsafeCheckin({ streakCount: streak.count, to: to, isLostStreak: isLostStreak });\\n  }\\n\\n  /**\\n   * @dev Restore the lost streak.\\n   * @param to Address for restoring streak.\\n   * @param maxAmountIn the amount of `paymentToken` that users accept to pay for restoring their streak.\\n   *\\n   * Requirements:\\n   * - Revert when there's no lost streak.\\n   * - Revert when restore not in freeze period.\\n   * - If caller is different from address to, caller must be delegated by address `to`.\\n   *\\n   * Emits the {StreakRestored} event.\\n   */\\n  function _restoreStreak(address to, uint256 maxAmountIn) internal {\\n    Streak memory streak = _usersStreakMap[to];\\n    if (_checkNewUser(streak)) {\\n      revert ErrNewUserCannotRestore();\\n    }\\n    uint256 lostStreakCount = streak.count;\\n    if (lostStreakCount == 0) revert ErrZeroLostStreakCount();\\n\\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\\n\\n    (bool isLostStreak,) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\\n    if (!isLostStreak) revert ErrNoLostStreak();\\n\\n    bool freezeTimeEnded = _isFreezeTimeEnded(lastCheckedDayIndex);\\n    if (freezeTimeEnded) revert ErrFreezeTimeEnded();\\n\\n    _unsafeCheckin({ streakCount: lostStreakCount, to: to, isLostStreak: false });\\n\\n    // charge restoration cost\\n    uint256 costInPaymentToken =\\n      _handlePaymentForRestoration({ lostStreakCount: lostStreakCount, maxAmountIn: maxAmountIn });\\n\\n    emit StreakRestored(to, lostStreakCount, streak.lastActivated, costInPaymentToken);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function forceRestoreStreak(address[] calldata addresses, uint256[] calldata streaks)\\n    external\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n  {\\n    uint256 length = addresses.length;\\n    if (length != streaks.length) revert ErrInvalidLength();\\n\\n    for (uint256 i; i < length; ++i) {\\n      _unsafeCheckin({ streakCount: streaks[i], to: addresses[i], isLostStreak: false });\\n    }\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function isRestorable(address user) external view returns (bool) {\\n    Streak memory streak = _usersStreakMap[user];\\n    if (_checkNewUser(streak)) {\\n      return false;\\n    }\\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\\n    (bool lostStreak,) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\\n    bool freezeTimeEnded = _isFreezeTimeEnded(lastCheckedDayIndex);\\n\\n    return lostStreak && !freezeTimeEnded;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getStreak(address user)\\n    external\\n    view\\n    override\\n    returns (uint256 currentStreakCount, uint256 lastActivated, uint256 longestStreakCount, uint256 lostStreakCount)\\n  {\\n    Streak memory streak = _usersStreakMap[user];\\n    if (_checkNewUser(streak)) {\\n      return (0, 0, 0, 0);\\n    }\\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\\n    (bool isLostStreak,) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\\n\\n    if (isLostStreak) {\\n      lostStreakCount = streak.count;\\n    } else {\\n      currentStreakCount = streak.count;\\n    }\\n\\n    lastActivated = streak.lastActivated;\\n    longestStreakCount = streak.longestCount;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getActivationStatus(address user) external view override returns (bool isLostStreak, bool hasCheckedToday) {\\n    Streak memory streak = _usersStreakMap[user];\\n    if (_checkNewUser(streak)) {\\n      return (false, false);\\n    }\\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\\n    (isLostStreak, hasCheckedToday) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getRestorationCosts(uint256 lostStreakCount) external view returns (uint256 costInPaymentToken) {\\n    return _getRestorationCosts(lostStreakCount);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getStreakLifeTime() external view returns (uint256) {\\n    return _streakLifeTime;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getResetDuration() external view returns (uint256) {\\n    return _resetTime;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getFreezePeriod() external view returns (uint256) {\\n    return _freezeTime;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getTreasury() external view returns (address) {\\n    return _treasury;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getPaymentToken() external view returns (address) {\\n    return _paymentToken;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getAllRestorationCosts() external view returns (RestorationCost[] memory) {\\n    return _restorationCosts;\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function getInitialTime() external view returns (uint256) {\\n    return _initialTime;\\n  }\\n\\n  // @inheritdoc ICheckin\\n  function setResetDuration(uint256 newResetDuration) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setResetDuration(newResetDuration);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function setFreezePeriod(uint256 newFreezePeriod) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setFreezePeriod(newFreezePeriod);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function setPaymentToken(address paymentToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setPaymentToken(paymentToken);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function setTreasury(address treasury) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setTreasury(treasury);\\n  }\\n\\n  /// @inheritdoc ICheckin\\n  function setRestorationCosts(RestorationCost[] memory restorationCosts) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    _setRestorationCosts(restorationCosts);\\n  }\\n\\n  ///@dev Two arrays must have same length and ascending order.\\n  function _setRestorationCosts(RestorationCost[] memory restorationCosts) internal {\\n    delete _restorationCosts;\\n\\n    uint256 length = restorationCosts.length;\\n    if (length == 0 || length != restorationCosts.length) revert ErrInvalidLength();\\n\\n    _restorationCosts.push(restorationCosts[0]);\\n\\n    for (uint256 i = 1; i < length; ++i) {\\n      if (restorationCosts[i].lowerMilestone <= restorationCosts[i - 1].lowerMilestone) {\\n        revert ErrInvalidOrderOfRestorationCosts();\\n      }\\n\\n      _restorationCosts.push(restorationCosts[i]);\\n    }\\n\\n    emit RestorationCostUpdated(restorationCosts);\\n  }\\n\\n  /// @dev Update freeze period in timestamp.\\n  function _setFreezePeriod(uint256 freezePeriod) internal {\\n    _freezeTime = freezePeriod;\\n\\n    emit FreezePeriodUpdated(freezePeriod);\\n  }\\n\\n  /// @dev Update payment token address.\\n  function _setPaymentToken(address paymentToken) internal {\\n    _paymentToken = paymentToken;\\n\\n    emit PaymentTokenUpdated(paymentToken);\\n  }\\n\\n  /// @dev Update treasury address.\\n  function _setTreasury(address treasury) internal {\\n    _treasury = treasury;\\n\\n    emit TreasuryUpdated(treasury);\\n  }\\n\\n  /// @dev Update treasury address.\\n  function _setInitialTime() internal {\\n    /// @dev Reset the timestamp to 00:00 GMT of the current block time\\n    _initialTime = block.timestamp / _streakLifeTime;\\n    /// @dev Decrease initial Time to 1 day to avoid overflow\\n    _initialTime -= 1;\\n    _initialTime *= _streakLifeTime;\\n\\n    _initialTime += _resetTime;\\n\\n    emit InitialTimeUpdated(_initialTime);\\n  }\\n\\n  /// @dev Determine the cost in USD and calculate amount in `paymentToken`. Then transfer it to treasury.\\n  function _handlePaymentForRestoration(uint256 lostStreakCount, uint256 maxAmountIn)\\n    internal\\n    returns (uint256 costInPaymentToken)\\n  {\\n    costInPaymentToken = _getRestorationCosts(lostStreakCount);\\n\\n    // return immediately if there's no cost.\\n    if (costInPaymentToken == 0) return costInPaymentToken;\\n\\n    if (costInPaymentToken > maxAmountIn) {\\n      revert ErrInsufficientPayment();\\n    }\\n\\n    _paymentToken.safeTransferFrom(msg.sender, _treasury, costInPaymentToken);\\n  }\\n\\n  /// @dev Return the cost in USD to restore the `lostStreakCount`.\\n  function _getRestorationCosts(uint256 lostStreakCount) internal view returns (uint256 costInPaymentToken) {\\n    RestorationCost[] memory restorations = _restorationCosts;\\n    uint256 length = restorations.length;\\n\\n    // When there's no restoration cost, immediately return to prevent underflow errors in the below reverse loop.\\n    if (length == 0) return 0;\\n\\n    // determine the index range of the lost streak by searching from biggest milestone.\\n    // if the lost streak larger or equal to any lower milestone, the range is from that milestone to the next one.\\n    for (uint256 i = length - 1; i >= 0; --i) {\\n      if (lostStreakCount >= restorations[i].lowerMilestone) {\\n        costInPaymentToken = uint256(restorations[i].costInToken);\\n        break;\\n      }\\n\\n      // break immediately when index is zero to avoid underflow issue.\\n      if (i == 0) break;\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the activation status of `streak`.\\n   * @return isLostStreak Flag indicates whether streak are lost.\\n   * @return hasCheckedToday Flag indicates whether streak has checked today.\\n   */\\n  function _getActivationStatus(uint256 currentDayIndex, uint256 lastCheckedDayIndex)\\n    internal\\n    pure\\n    returns (bool isLostStreak, bool hasCheckedToday)\\n  {\\n    unchecked {\\n      isLostStreak = currentDayIndex > lastCheckedDayIndex + 1;\\n      hasCheckedToday = currentDayIndex == lastCheckedDayIndex;\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the restorable status of `streak`.\\n   * @return freezeTimeEnded Flag indicates whether the freeze time are ended.\\n   */\\n  function _isFreezeTimeEnded(uint256 lastCheckedDayIndex) internal view returns (bool freezeTimeEnded) {\\n    unchecked {\\n      uint256 startOfFreezePeriod = lastCheckedDayIndex * _streakLifeTime + _initialTime;\\n      freezeTimeEnded = block.timestamp >= startOfFreezePeriod + _freezeTime;\\n    }\\n  }\\n\\n  /// @dev Returns the number of days elapsed from the current timestamp and from the last checker.\\n  function _calculateElapsedDays(Streak memory streak)\\n    internal\\n    view\\n    returns (uint256 currentDayIndex, uint256 lastCheckedDayIndex)\\n  {\\n    currentDayIndex = _getNumberOfIntervals(block.timestamp);\\n    lastCheckedDayIndex = _getNumberOfIntervals(streak.lastActivated);\\n  }\\n\\n  /**\\n   * @dev Changes to new streak lifetime.\\n   * @param streakLifeTime The active streak lifetime.\\n   *\\n   * Emits the {StreakLifeTimeChanged} event.\\n   */\\n  function _setStreakLifeTime(uint256 streakLifeTime) internal {\\n    if (streakLifeTime == 0) revert ErrInvalidStreakLifeTime();\\n\\n    _streakLifeTime = streakLifeTime;\\n    emit StreakLifeTimeChanged(streakLifeTime);\\n  }\\n\\n  /// @dev Change to new reset duration.\\n  function _setResetDuration(uint256 resetDuration) internal {\\n    if (resetDuration >= _streakLifeTime) revert ErrInvalidResetDuration();\\n    _resetTime = resetDuration;\\n    emit ResetDurationUpdated(resetDuration);\\n  }\\n\\n  /**\\n   * @dev Returns the number of time intervals in UTC based on a given timestamp and the reset duration.\\n   * @param timestamp \\tThe timestamp to calculate the number of intervals from.\\n   */\\n  function _getNumberOfIntervals(uint256 timestamp) internal view returns (uint256 numIntervals) {\\n    unchecked {\\n      numIntervals = (timestamp - _initialTime) / _streakLifeTime;\\n    }\\n  }\\n\\n  /// @dev Check if this is a new user\\n  function _checkNewUser(Streak memory streak) internal pure returns (bool) {\\n    return streak.lastActivated == 0;\\n  }\\n\\n  /// @dev Update the streak info for `to` unsafely.\\n  function _unsafeCheckin(uint256 streakCount, address to, bool isLostStreak) private returns (uint256 newStreakCount) {\\n    unchecked {\\n      newStreakCount = isLostStreak ? 1 : (streakCount + 1);\\n    }\\n\\n    Streak storage $ = _usersStreakMap[to];\\n    $.count = newStreakCount;\\n    $.lastActivated = block.timestamp;\\n    if (newStreakCount > $.longestCount) {\\n      $.longestCount = newStreakCount;\\n    }\\n\\n    emit StreakUpdated(to, newStreakCount, block.timestamp, $.longestCount);\\n  }\\n}\\n\",\"keccak256\":\"0x7f16e26fb19372cd98e7c16feab8ecd72943711753f74c9594bedd8e5e14689a\",\"license\":\"MIT\"},\"src/CheckinMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { BaseCheckin } from \\\"./BaseCheckin.sol\\\";\\n\\ncontract CheckinMock is BaseCheckin {\\n  constructor() BaseCheckin() { }\\n\\n  function activateStreak(address to) external {\\n    _activateStreak(to);\\n  }\\n\\n  function restoreStreak(address to, uint256 maxAmountIn) external {\\n    _restoreStreak(to, maxAmountIn);\\n  }\\n}\\n\",\"keccak256\":\"0xfef693b8e3e90204fd44254bd550d4e5d7ab545f8bbef431a2c7d837902b1a90\",\"license\":\"MIT\"},\"src/interfaces/ICheckin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface ICheckin {\\n  struct Streak {\\n    // the streak count.\\n    uint256 count;\\n    // the time of last prayed.\\n    uint256 lastActivated;\\n    // The longest streak count.\\n    uint256 longestCount;\\n  }\\n\\n  struct RestorationCost {\\n    // The lower bounds of lost streak ranges.\\n    uint32 lowerMilestone;\\n    // The cost to restore streak pegged in token.\\n    uint80 costInToken;\\n  }\\n\\n  struct CheckerCountInfo {\\n    uint64 syncedDayIndex;\\n    uint64 countPerDay;\\n  }\\n\\n  /// @dev Emitted when the daily streak of an address of is updated.\\n  event StreakUpdated(\\n    address indexed user, uint256 indexed newAmount, uint256 indexed newLastUpdated, uint256 longestStreakCount\\n  );\\n\\n  /// @dev Emitted when the daily streak of an address of is updated.\\n  event StreakRestored(\\n    address indexed user, uint256 indexed restoredStreakCount, uint256 indexed lastUpdated, uint256 costInPaymentToken\\n  );\\n\\n  /// @dev Emitted when the prayer count synced daily.\\n  event CheckerCountSynced(address indexed prayer, CheckerCountInfo prayerCountInfo);\\n\\n  /// @dev Emitted when active streak lifetime duration is updated.\\n  event StreakLifeTimeChanged(uint256 streakLifeTime);\\n\\n  /// @dev Emitted when the reset steak duration is updated.\\n  event ResetDurationUpdated(uint256 newResetDuration);\\n  /// @dev Emitted when the freeze period is updated.\\n  event FreezePeriodUpdated(uint256 newFreezePeriod);\\n  /// @dev Emitted when treasury is updated.\\n  event TreasuryUpdated(address newTreasury);\\n  /// @dev Emitted when payment token is updated.\\n  event PaymentTokenUpdated(address newPaymentToken);\\n  /// @dev Emitted when the restoration cost is updated.\\n  event RestorationCostUpdated(RestorationCost[] newRestorationCosts);\\n  /// @dev Emitted when the initial time is updated.\\n  event InitialTimeUpdated(uint256 time);\\n\\n  /// @dev Error when streak is still active.\\n  error ErrAlreadyActivatedStreak();\\n\\n  /// @dev Error when streak lifetime is invalid e.g. when streak lifetime is 0.\\n  error ErrInvalidStreakLifeTime();\\n\\n  /// @dev Error when the reset duration is larger than the streak lifetime.\\n  error ErrInvalidResetDuration();\\n\\n  /// @dev Revert when there is no lost streak to restore.\\n  error ErrNoLostStreak();\\n\\n  /// @dev Revert when the freeze time period has already ended.\\n  error ErrFreezeTimeEnded();\\n\\n  /// @dev Revert when the amount acceptable is insufficient for restoration.\\n  error ErrInsufficientPayment();\\n\\n  /// @dev Revert when the caller is not delegated by the address `to`.\\n  error ErrCallerNotDelegated();\\n\\n  /// @dev Revert when delegatee attempts start new streak for delegator.\\n  error ErrStartNewStreakByDelegatee();\\n\\n  /// @dev Revert when attempting to restore a streak, but the last streak count is 0.\\n  error ErrZeroLostStreakCount();\\n\\n  /// @dev Revert when length of input arrays are mismatch.\\n  error ErrInvalidLength();\\n\\n  /// @dev Revert when the order of restoration cost array is not ascending based on 'lowerMilestone'.\\n  error ErrInvalidOrderOfRestorationCosts();\\n\\n  // @dev Error when streak is still active.\\n  error ErrNewUserCannotRestore();\\n\\n  /**\\n   * @dev Restore streak amount.\\n   *\\n   * Requirements:\\n   * - The caller must be default admin.\\n   */\\n  function forceRestoreStreak(address[] calldata addresses, uint256[] calldata streaks) external;\\n\\n  /// @dev Return the restorable of `user`'s lost streak.\\n  function isRestorable(address user) external view returns (bool);\\n\\n  /**\\n   * @dev Returns streak info including amount and last update timestamp of sender.\\n   * @return currentStreakCount The current streak count, equal to zero whether streak is lost.\\n   * @return lastActivated The last pray timestamp.\\n   * @return longestStreakCount The longest streak count, only affected from upgrading V3.\\n   * @return lostStreakCount The lost streak count, equal to zero whether streak is still alive.\\n   *\\n   */\\n  function getStreak(address user)\\n    external\\n    view\\n    returns (uint256 currentStreakCount, uint256 lastActivated, uint256 longestStreakCount, uint256 lostStreakCount);\\n\\n  /**\\n   * @dev Get the activation status of `user`.\\n   * @return isLostStreak Indicates whether the streak is lost.\\n   * @return hasCheckedToday Indicates whether the address `user` has prayed today.\\n   */\\n  function getActivationStatus(address user) external view returns (bool isLostStreak, bool hasCheckedToday);\\n\\n  /// @dev Returns active streak life time.\\n  function getStreakLifeTime() external view returns (uint256);\\n\\n  /// @dev Returns the reset duration calculated based on the UTC.\\n  function getResetDuration() external view returns (uint256);\\n\\n  /// @dev Returns the freeze period in timestamp for restoration.\\n  function getFreezePeriod() external view returns (uint256);\\n\\n  /// @dev Returns the address treasury where receive the restoration fee.\\n  function getTreasury() external view returns (address);\\n\\n  /// @dev Returns the address of token of restoration fee.\\n  function getPaymentToken() external view returns (address);\\n\\n  /// @dev Returns all the cost in usd according to the lower milestones.\\n  function getAllRestorationCosts() external view returns (RestorationCost[] memory);\\n\\n  /// @dev Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.\\n  function getRestorationCosts(uint256 lostStreakCount) external view returns (uint256 costInPaymentToken);\\n\\n  /// @dev Returns the Initail Time calculated based on the UTC.\\n  function getInitialTime() external view returns (uint256);\\n\\n  /**\\n   * @dev Set new reset duration for streak.\\n   * @param newResetDuration The reset duration time.\\n   *\\n   * Requirements:\\n   * - The caller must be default admin.\\n   * - The reset duration must be less than the streak life time.\\n   *\\n   * Emits the {ErrInvalidResetDuration} event.\\n   */\\n  function setResetDuration(uint256 newResetDuration) external;\\n\\n  /**\\n   * @dev Update freeze period.\\n   *\\n   * Requirements:\\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\\n   *\\n   * Emits {FreezePeriodUpdated} event.\\n   */\\n  function setFreezePeriod(uint256 newFreezePeriod) external;\\n\\n  /**\\n   * @dev Update address of payment token.\\n   *\\n   * Requirements:\\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\\n   *\\n   * Emits {PaymentTokenUpdated} event.\\n   */\\n  function setPaymentToken(address paymentToken) external;\\n\\n  /**\\n   * @dev Update address of treasury.\\n   *\\n   * Requirements:\\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\\n   *\\n   * Emits {TreasuryUpdated} event.\\n   */\\n  function setTreasury(address treasury) external;\\n\\n  /**\\n   * @dev Update the cost for restoration.\\n   *\\n   * Requirements:\\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\\n   * - The array `restorationCost` must be sorted as ascending by `lowerMilestone`.\\n   *\\n   * Emits {RestorationCostUpdated} event.\\n   */\\n  function setRestorationCosts(RestorationCost[] memory restorationCosts) external;\\n}\\n\",\"keccak256\":\"0x2078ad8f1cb77ba46de95d1d46e40e4f8b314f0af6c054d7101b4fe69df04096\",\"license\":\"MIT\"},\"src/utils/transfers/TransferFromHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title TransferFromHelper\\n * @dev Wraps transfer from methods for ERC20 tokens that do not consistently return true/false or revert.\\n */\\nlibrary TransferFromHelper {\\n  /**\\n   * @dev Transfers token and wraps result for the input address to a recipient.\\n   */\\n  function safeTransferFrom(address _token, address _from, address _to, uint256 _value) internal {\\n    (bool success, bytes memory data) = _token.call(\\n      abi.encodeWithSelector(\\n        0x23b872dd, // IERC20.transferFrom.selector\\n        _from,\\n        _to,\\n        _value\\n      )\\n    );\\n\\n    if (!success || !(data.length == 0 || abi.decode(data, (bool)))) {\\n      revert(\\n        string(\\n          abi.encodePacked(\\n            \\\"TransferFromHelper: could not transfer token \\\",\\n            Strings.toHexString(uint160(_token), 20),\\n            \\\" from \\\",\\n            Strings.toHexString(uint160(_from), 20),\\n            \\\" to \\\",\\n            Strings.toHexString(uint160(_to), 20),\\n            \\\" value \\\",\\n            Strings.toHexString(_value)\\n          )\\n        )\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2e6f6bfa1a4d2a69cb69de81d5af3bce69601ed6759d77fbbe416e1f40013286\",\"license\":\"MIT\"}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.23+commit.f704f362"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrAlreadyActivatedStreak"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrCallerNotDelegated"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrFreezeTimeEnded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrInsufficientPayment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrInvalidLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrInvalidOrderOfRestorationCosts"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrInvalidResetDuration"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrInvalidStreakLifeTime"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrNewUserCannotRestore"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrNoLostStreak"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrStartNewStreakByDelegatee"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ErrZeroLostStreakCount"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prayer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "struct ICheckin.CheckerCountInfo",
              "name": "prayerCountInfo",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "syncedDayIndex",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "countPerDay",
                  "type": "uint64"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CheckerCountSynced",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFreezePeriod",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "FreezePeriodUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "InitialTimeUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newPaymentToken",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PaymentTokenUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newResetDuration",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ResetDurationUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct ICheckin.RestorationCost[]",
              "name": "newRestorationCosts",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "lowerMilestone",
                  "type": "uint32"
                },
                {
                  "internalType": "uint80",
                  "name": "costInToken",
                  "type": "uint80"
                }
              ],
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RestorationCostUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleAdminChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleGranted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RoleRevoked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streakLifeTime",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StreakLifeTimeChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "restoredStreakCount",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "costInPaymentToken",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StreakRestored",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newAmount",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newLastUpdated",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "longestStreakCount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StreakUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newTreasury",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TreasuryUpdated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "activateStreak"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "streaks",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "forceRestoreStreak"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getActivationStatus",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isLostStreak",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasCheckedToday",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllRestorationCosts",
          "outputs": [
            {
              "internalType": "struct ICheckin.RestorationCost[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "lowerMilestone",
                  "type": "uint32"
                },
                {
                  "internalType": "uint80",
                  "name": "costInToken",
                  "type": "uint80"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getFreezePeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getInitialTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPaymentToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getResetDuration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lostStreakCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRestorationCosts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "costInPaymentToken",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleMember",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleMemberCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStreak",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "currentStreakCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastActivated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "longestStreakCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lostStreakCount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getStreakLifeTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTreasury",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "grantRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "streakLifeTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resetTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "freezeTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "struct ICheckin.RestorationCost[]",
              "name": "restorationCosts",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "lowerMilestone",
                  "type": "uint32"
                },
                {
                  "internalType": "uint80",
                  "name": "costInToken",
                  "type": "uint80"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isRestorable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceRole"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountIn",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "restoreStreak"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revokeRole"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFreezePeriod",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setFreezePeriod"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPaymentToken"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newResetDuration",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setResetDuration"
        },
        {
          "inputs": [
            {
              "internalType": "struct ICheckin.RestorationCost[]",
              "name": "restorationCosts",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "lowerMilestone",
                  "type": "uint32"
                },
                {
                  "internalType": "uint80",
                  "name": "costInToken",
                  "type": "uint80"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRestorationCosts"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setTreasury"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "forceRestoreStreak(address[],uint256[])": {
            "details": "Restore streak amount. Requirements: - The caller must be default admin."
          },
          "getActivationStatus(address)": {
            "details": "Get the activation status of `user`.",
            "returns": {
              "hasCheckedToday": "Indicates whether the address `user` has prayed today.",
              "isLostStreak": "Indicates whether the streak is lost."
            }
          },
          "getAllRestorationCosts()": {
            "details": "Returns all the cost in usd according to the lower milestones."
          },
          "getFreezePeriod()": {
            "details": "Returns the freeze period in timestamp for restoration."
          },
          "getInitialTime()": {
            "details": "Returns the Initail Time calculated based on the UTC."
          },
          "getPaymentToken()": {
            "details": "Returns the address of token of restoration fee."
          },
          "getResetDuration()": {
            "details": "Returns the reset duration calculated based on the UTC."
          },
          "getRestorationCosts(uint256)": {
            "details": "Returns the cost in usd and cost in `paymentToken` according to the the lost streak count."
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "getRoleMember(bytes32,uint256)": {
            "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
          },
          "getRoleMemberCount(bytes32)": {
            "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
          },
          "getStreak(address)": {
            "details": "Returns streak info including amount and last update timestamp of sender.",
            "returns": {
              "currentStreakCount": "The current streak count, equal to zero whether streak is lost.",
              "lastActivated": "The last pray timestamp.",
              "longestStreakCount": "The longest streak count, only affected from upgrading V3.",
              "lostStreakCount": "The lost streak count, equal to zero whether streak is still alive."
            }
          },
          "getStreakLifeTime()": {
            "details": "Returns active streak life time."
          },
          "getTreasury()": {
            "details": "Returns the address treasury where receive the restoration fee."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "isRestorable(address)": {
            "details": "Return the restorable of `user`'s lost streak."
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "setFreezePeriod(uint256)": {
            "details": "Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event."
          },
          "setPaymentToken(address)": {
            "details": "Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event."
          },
          "setResetDuration(uint256)": {
            "details": "Set new reset duration for streak.",
            "params": {
              "newResetDuration": "The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event."
            }
          },
          "setRestorationCosts((uint32,uint80)[])": {
            "details": "Update the cost for restoration. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. - The array `restorationCost` must be sorted as ascending by `lowerMilestone`. Emits {RestorationCostUpdated} event."
          },
          "setTreasury(address)": {
            "details": "Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event."
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/",
        ":@fdk/=lib/foundry-deployment-kit/script/",
        ":@openzeppelin/contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/",
        ":@solady/=lib/foundry-deployment-kit/lib/solady/src/",
        ":contract-libs/=lib/foundry-deployment-kit/lib/contract-libs/src/",
        ":ds-test/=lib/foundry-deployment-kit/lib/solady/lib/ds-test/src/",
        ":erc4626-tests/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/foundry-deployment-kit/lib/forge-std/src/",
        ":foundry-deployment-kit/=lib/foundry-deployment-kit/",
        ":openzeppelin-contracts/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/",
        ":solady/=lib/foundry-deployment-kit/lib/solady/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/CheckinMock.sol": "CheckinMock"
      },
      "libraries": {}
    },
    "sources": {
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "keccak256": "0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "keccak256": "0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "keccak256": "0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "keccak256": "0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/foundry-deployment-kit/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "keccak256": "0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n",
        "license": "MIT"
      },
      "src/BaseCheckin.sol": {
        "keccak256": "0x7f16e26fb19372cd98e7c16feab8ecd72943711753f74c9594bedd8e5e14689a",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport { ICheckin } from \"./interfaces/ICheckin.sol\";\nimport { TransferFromHelper } from \"./utils/transfers/TransferFromHelper.sol\";\nimport { Initializable } from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport { AccessControlEnumerable } from \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nabstract contract BaseCheckin is Initializable, AccessControlEnumerable, ICheckin {\n  using TransferFromHelper for address;\n  /**\n   * @notice The streak lifetime in second(s).\n   * @dev This variable will NOT be updated after initializing because of affecting to all current active streaks.\n   */\n\n  uint256 internal _initialTime;\n  uint256 internal _streakLifeTime;\n  mapping(address => Streak) internal _usersStreakMap;\n  /**\n   * @notice The reset duration in second(s).\n   * @dev This reset duration is calculated based on the UTC.\n   */\n  uint256 internal _resetTime;\n\n  /**\n   * @dev Defines the duration in which lost streaks can be restored.\n   * Users have the opportunity to restore lost streaks during this freeze period after the day they were lost.\n   */\n  uint256 internal _freezeTime;\n\n  /// @dev The address for receiving restoration cost.\n  address internal _treasury;\n  /// @dev The address that paid to restore the lost streak.\n  address internal _paymentToken;\n\n  /**\n   * @dev Store array of cost for restoration base on the lower bound of lost streak ranges.\n   * The cost is pegged in `_paymentToken`.\n   *\n   * The below example table describes the cost to restore the lost streak.\n   *\n   * |  lost streak range  |  lower bound  |  fee in Token |\n   * | ------------------- | ------------- | ------------- |\n   * | 01 - 10             | 01            | 1             |\n   * | 11 - 20             | 11            | 3             |\n   * | 21 - 50             | 21            | 6             |\n   * | 51 - 99             | 51            | 10            |\n   * | 100+                | 100           | 15            |\n   */\n  RestorationCost[] internal _restorationCosts;\n\n  constructor() {\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n  }\n\n  function initialize(\n    uint256 streakLifeTime,\n    uint256 resetTime,\n    uint256 freezeTime,\n    address paymentToken,\n    address treasury,\n    RestorationCost[] calldata restorationCosts\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) initializer {\n    _setStreakLifeTime(streakLifeTime);\n    _setResetDuration(resetTime);\n    _setFreezePeriod(freezeTime);\n    _setPaymentToken(paymentToken);\n    _setTreasury(treasury);\n    _setRestorationCosts(restorationCosts);\n    _setInitialTime();\n  }\n\n  /**\n   * @dev Activate the streak for address `to`.\n   * @param to Address for activating streak.\n   *\n   * Requirements:\n   * - Revert when activating before the allowed activation block.\n   * - Revert when streak is still active.\n   * - If caller is different from address to, caller must be delegated by address `to`.\n   *\n   * Emits the {StreakUpdated} event.\n   */\n  function _activateStreak(address to) internal {\n    Streak memory streak = _usersStreakMap[to];\n    if (_checkNewUser(streak)) {\n      _unsafeCheckin({ streakCount: streak.count, to: to, isLostStreak: false });\n      return;\n    }\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\n    (bool isLostStreak, bool hasCheckedToday) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\n    bool freezeTimeEnded = _isFreezeTimeEnded(lastCheckedDayIndex);\n    if (hasCheckedToday) revert ErrAlreadyActivatedStreak();\n    if (to != msg.sender && isLostStreak && !freezeTimeEnded) {\n      revert ErrStartNewStreakByDelegatee();\n    }\n\n    _unsafeCheckin({ streakCount: streak.count, to: to, isLostStreak: isLostStreak });\n  }\n\n  /**\n   * @dev Restore the lost streak.\n   * @param to Address for restoring streak.\n   * @param maxAmountIn the amount of `paymentToken` that users accept to pay for restoring their streak.\n   *\n   * Requirements:\n   * - Revert when there's no lost streak.\n   * - Revert when restore not in freeze period.\n   * - If caller is different from address to, caller must be delegated by address `to`.\n   *\n   * Emits the {StreakRestored} event.\n   */\n  function _restoreStreak(address to, uint256 maxAmountIn) internal {\n    Streak memory streak = _usersStreakMap[to];\n    if (_checkNewUser(streak)) {\n      revert ErrNewUserCannotRestore();\n    }\n    uint256 lostStreakCount = streak.count;\n    if (lostStreakCount == 0) revert ErrZeroLostStreakCount();\n\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\n\n    (bool isLostStreak,) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\n    if (!isLostStreak) revert ErrNoLostStreak();\n\n    bool freezeTimeEnded = _isFreezeTimeEnded(lastCheckedDayIndex);\n    if (freezeTimeEnded) revert ErrFreezeTimeEnded();\n\n    _unsafeCheckin({ streakCount: lostStreakCount, to: to, isLostStreak: false });\n\n    // charge restoration cost\n    uint256 costInPaymentToken =\n      _handlePaymentForRestoration({ lostStreakCount: lostStreakCount, maxAmountIn: maxAmountIn });\n\n    emit StreakRestored(to, lostStreakCount, streak.lastActivated, costInPaymentToken);\n  }\n\n  /// @inheritdoc ICheckin\n  function forceRestoreStreak(address[] calldata addresses, uint256[] calldata streaks)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    uint256 length = addresses.length;\n    if (length != streaks.length) revert ErrInvalidLength();\n\n    for (uint256 i; i < length; ++i) {\n      _unsafeCheckin({ streakCount: streaks[i], to: addresses[i], isLostStreak: false });\n    }\n  }\n\n  /// @inheritdoc ICheckin\n  function isRestorable(address user) external view returns (bool) {\n    Streak memory streak = _usersStreakMap[user];\n    if (_checkNewUser(streak)) {\n      return false;\n    }\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\n    (bool lostStreak,) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\n    bool freezeTimeEnded = _isFreezeTimeEnded(lastCheckedDayIndex);\n\n    return lostStreak && !freezeTimeEnded;\n  }\n\n  /// @inheritdoc ICheckin\n  function getStreak(address user)\n    external\n    view\n    override\n    returns (uint256 currentStreakCount, uint256 lastActivated, uint256 longestStreakCount, uint256 lostStreakCount)\n  {\n    Streak memory streak = _usersStreakMap[user];\n    if (_checkNewUser(streak)) {\n      return (0, 0, 0, 0);\n    }\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\n    (bool isLostStreak,) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\n\n    if (isLostStreak) {\n      lostStreakCount = streak.count;\n    } else {\n      currentStreakCount = streak.count;\n    }\n\n    lastActivated = streak.lastActivated;\n    longestStreakCount = streak.longestCount;\n  }\n\n  /// @inheritdoc ICheckin\n  function getActivationStatus(address user) external view override returns (bool isLostStreak, bool hasCheckedToday) {\n    Streak memory streak = _usersStreakMap[user];\n    if (_checkNewUser(streak)) {\n      return (false, false);\n    }\n    (uint256 currentDayIndex, uint256 lastCheckedDayIndex) = _calculateElapsedDays(streak);\n    (isLostStreak, hasCheckedToday) = _getActivationStatus(currentDayIndex, lastCheckedDayIndex);\n  }\n\n  /// @inheritdoc ICheckin\n  function getRestorationCosts(uint256 lostStreakCount) external view returns (uint256 costInPaymentToken) {\n    return _getRestorationCosts(lostStreakCount);\n  }\n\n  /// @inheritdoc ICheckin\n  function getStreakLifeTime() external view returns (uint256) {\n    return _streakLifeTime;\n  }\n\n  /// @inheritdoc ICheckin\n  function getResetDuration() external view returns (uint256) {\n    return _resetTime;\n  }\n\n  /// @inheritdoc ICheckin\n  function getFreezePeriod() external view returns (uint256) {\n    return _freezeTime;\n  }\n\n  /// @inheritdoc ICheckin\n  function getTreasury() external view returns (address) {\n    return _treasury;\n  }\n\n  /// @inheritdoc ICheckin\n  function getPaymentToken() external view returns (address) {\n    return _paymentToken;\n  }\n\n  /// @inheritdoc ICheckin\n  function getAllRestorationCosts() external view returns (RestorationCost[] memory) {\n    return _restorationCosts;\n  }\n\n  /// @inheritdoc ICheckin\n  function getInitialTime() external view returns (uint256) {\n    return _initialTime;\n  }\n\n  // @inheritdoc ICheckin\n  function setResetDuration(uint256 newResetDuration) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setResetDuration(newResetDuration);\n  }\n\n  /// @inheritdoc ICheckin\n  function setFreezePeriod(uint256 newFreezePeriod) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setFreezePeriod(newFreezePeriod);\n  }\n\n  /// @inheritdoc ICheckin\n  function setPaymentToken(address paymentToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setPaymentToken(paymentToken);\n  }\n\n  /// @inheritdoc ICheckin\n  function setTreasury(address treasury) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setTreasury(treasury);\n  }\n\n  /// @inheritdoc ICheckin\n  function setRestorationCosts(RestorationCost[] memory restorationCosts) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _setRestorationCosts(restorationCosts);\n  }\n\n  ///@dev Two arrays must have same length and ascending order.\n  function _setRestorationCosts(RestorationCost[] memory restorationCosts) internal {\n    delete _restorationCosts;\n\n    uint256 length = restorationCosts.length;\n    if (length == 0 || length != restorationCosts.length) revert ErrInvalidLength();\n\n    _restorationCosts.push(restorationCosts[0]);\n\n    for (uint256 i = 1; i < length; ++i) {\n      if (restorationCosts[i].lowerMilestone <= restorationCosts[i - 1].lowerMilestone) {\n        revert ErrInvalidOrderOfRestorationCosts();\n      }\n\n      _restorationCosts.push(restorationCosts[i]);\n    }\n\n    emit RestorationCostUpdated(restorationCosts);\n  }\n\n  /// @dev Update freeze period in timestamp.\n  function _setFreezePeriod(uint256 freezePeriod) internal {\n    _freezeTime = freezePeriod;\n\n    emit FreezePeriodUpdated(freezePeriod);\n  }\n\n  /// @dev Update payment token address.\n  function _setPaymentToken(address paymentToken) internal {\n    _paymentToken = paymentToken;\n\n    emit PaymentTokenUpdated(paymentToken);\n  }\n\n  /// @dev Update treasury address.\n  function _setTreasury(address treasury) internal {\n    _treasury = treasury;\n\n    emit TreasuryUpdated(treasury);\n  }\n\n  /// @dev Update treasury address.\n  function _setInitialTime() internal {\n    /// @dev Reset the timestamp to 00:00 GMT of the current block time\n    _initialTime = block.timestamp / _streakLifeTime;\n    /// @dev Decrease initial Time to 1 day to avoid overflow\n    _initialTime -= 1;\n    _initialTime *= _streakLifeTime;\n\n    _initialTime += _resetTime;\n\n    emit InitialTimeUpdated(_initialTime);\n  }\n\n  /// @dev Determine the cost in USD and calculate amount in `paymentToken`. Then transfer it to treasury.\n  function _handlePaymentForRestoration(uint256 lostStreakCount, uint256 maxAmountIn)\n    internal\n    returns (uint256 costInPaymentToken)\n  {\n    costInPaymentToken = _getRestorationCosts(lostStreakCount);\n\n    // return immediately if there's no cost.\n    if (costInPaymentToken == 0) return costInPaymentToken;\n\n    if (costInPaymentToken > maxAmountIn) {\n      revert ErrInsufficientPayment();\n    }\n\n    _paymentToken.safeTransferFrom(msg.sender, _treasury, costInPaymentToken);\n  }\n\n  /// @dev Return the cost in USD to restore the `lostStreakCount`.\n  function _getRestorationCosts(uint256 lostStreakCount) internal view returns (uint256 costInPaymentToken) {\n    RestorationCost[] memory restorations = _restorationCosts;\n    uint256 length = restorations.length;\n\n    // When there's no restoration cost, immediately return to prevent underflow errors in the below reverse loop.\n    if (length == 0) return 0;\n\n    // determine the index range of the lost streak by searching from biggest milestone.\n    // if the lost streak larger or equal to any lower milestone, the range is from that milestone to the next one.\n    for (uint256 i = length - 1; i >= 0; --i) {\n      if (lostStreakCount >= restorations[i].lowerMilestone) {\n        costInPaymentToken = uint256(restorations[i].costInToken);\n        break;\n      }\n\n      // break immediately when index is zero to avoid underflow issue.\n      if (i == 0) break;\n    }\n  }\n\n  /**\n   * @dev Return the activation status of `streak`.\n   * @return isLostStreak Flag indicates whether streak are lost.\n   * @return hasCheckedToday Flag indicates whether streak has checked today.\n   */\n  function _getActivationStatus(uint256 currentDayIndex, uint256 lastCheckedDayIndex)\n    internal\n    pure\n    returns (bool isLostStreak, bool hasCheckedToday)\n  {\n    unchecked {\n      isLostStreak = currentDayIndex > lastCheckedDayIndex + 1;\n      hasCheckedToday = currentDayIndex == lastCheckedDayIndex;\n    }\n  }\n\n  /**\n   * @dev Return the restorable status of `streak`.\n   * @return freezeTimeEnded Flag indicates whether the freeze time are ended.\n   */\n  function _isFreezeTimeEnded(uint256 lastCheckedDayIndex) internal view returns (bool freezeTimeEnded) {\n    unchecked {\n      uint256 startOfFreezePeriod = lastCheckedDayIndex * _streakLifeTime + _initialTime;\n      freezeTimeEnded = block.timestamp >= startOfFreezePeriod + _freezeTime;\n    }\n  }\n\n  /// @dev Returns the number of days elapsed from the current timestamp and from the last checker.\n  function _calculateElapsedDays(Streak memory streak)\n    internal\n    view\n    returns (uint256 currentDayIndex, uint256 lastCheckedDayIndex)\n  {\n    currentDayIndex = _getNumberOfIntervals(block.timestamp);\n    lastCheckedDayIndex = _getNumberOfIntervals(streak.lastActivated);\n  }\n\n  /**\n   * @dev Changes to new streak lifetime.\n   * @param streakLifeTime The active streak lifetime.\n   *\n   * Emits the {StreakLifeTimeChanged} event.\n   */\n  function _setStreakLifeTime(uint256 streakLifeTime) internal {\n    if (streakLifeTime == 0) revert ErrInvalidStreakLifeTime();\n\n    _streakLifeTime = streakLifeTime;\n    emit StreakLifeTimeChanged(streakLifeTime);\n  }\n\n  /// @dev Change to new reset duration.\n  function _setResetDuration(uint256 resetDuration) internal {\n    if (resetDuration >= _streakLifeTime) revert ErrInvalidResetDuration();\n    _resetTime = resetDuration;\n    emit ResetDurationUpdated(resetDuration);\n  }\n\n  /**\n   * @dev Returns the number of time intervals in UTC based on a given timestamp and the reset duration.\n   * @param timestamp \tThe timestamp to calculate the number of intervals from.\n   */\n  function _getNumberOfIntervals(uint256 timestamp) internal view returns (uint256 numIntervals) {\n    unchecked {\n      numIntervals = (timestamp - _initialTime) / _streakLifeTime;\n    }\n  }\n\n  /// @dev Check if this is a new user\n  function _checkNewUser(Streak memory streak) internal pure returns (bool) {\n    return streak.lastActivated == 0;\n  }\n\n  /// @dev Update the streak info for `to` unsafely.\n  function _unsafeCheckin(uint256 streakCount, address to, bool isLostStreak) private returns (uint256 newStreakCount) {\n    unchecked {\n      newStreakCount = isLostStreak ? 1 : (streakCount + 1);\n    }\n\n    Streak storage $ = _usersStreakMap[to];\n    $.count = newStreakCount;\n    $.lastActivated = block.timestamp;\n    if (newStreakCount > $.longestCount) {\n      $.longestCount = newStreakCount;\n    }\n\n    emit StreakUpdated(to, newStreakCount, block.timestamp, $.longestCount);\n  }\n}\n",
        "license": "MIT"
      },
      "src/CheckinMock.sol": {
        "keccak256": "0xfef693b8e3e90204fd44254bd550d4e5d7ab545f8bbef431a2c7d837902b1a90",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport { BaseCheckin } from \"./BaseCheckin.sol\";\n\ncontract CheckinMock is BaseCheckin {\n  constructor() BaseCheckin() { }\n\n  function activateStreak(address to) external {\n    _activateStreak(to);\n  }\n\n  function restoreStreak(address to, uint256 maxAmountIn) external {\n    _restoreStreak(to, maxAmountIn);\n  }\n}\n",
        "license": "MIT"
      },
      "src/interfaces/ICheckin.sol": {
        "keccak256": "0x2078ad8f1cb77ba46de95d1d46e40e4f8b314f0af6c054d7101b4fe69df04096",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\ninterface ICheckin {\n  struct Streak {\n    // the streak count.\n    uint256 count;\n    // the time of last prayed.\n    uint256 lastActivated;\n    // The longest streak count.\n    uint256 longestCount;\n  }\n\n  struct RestorationCost {\n    // The lower bounds of lost streak ranges.\n    uint32 lowerMilestone;\n    // The cost to restore streak pegged in token.\n    uint80 costInToken;\n  }\n\n  struct CheckerCountInfo {\n    uint64 syncedDayIndex;\n    uint64 countPerDay;\n  }\n\n  /// @dev Emitted when the daily streak of an address of is updated.\n  event StreakUpdated(\n    address indexed user, uint256 indexed newAmount, uint256 indexed newLastUpdated, uint256 longestStreakCount\n  );\n\n  /// @dev Emitted when the daily streak of an address of is updated.\n  event StreakRestored(\n    address indexed user, uint256 indexed restoredStreakCount, uint256 indexed lastUpdated, uint256 costInPaymentToken\n  );\n\n  /// @dev Emitted when the prayer count synced daily.\n  event CheckerCountSynced(address indexed prayer, CheckerCountInfo prayerCountInfo);\n\n  /// @dev Emitted when active streak lifetime duration is updated.\n  event StreakLifeTimeChanged(uint256 streakLifeTime);\n\n  /// @dev Emitted when the reset steak duration is updated.\n  event ResetDurationUpdated(uint256 newResetDuration);\n  /// @dev Emitted when the freeze period is updated.\n  event FreezePeriodUpdated(uint256 newFreezePeriod);\n  /// @dev Emitted when treasury is updated.\n  event TreasuryUpdated(address newTreasury);\n  /// @dev Emitted when payment token is updated.\n  event PaymentTokenUpdated(address newPaymentToken);\n  /// @dev Emitted when the restoration cost is updated.\n  event RestorationCostUpdated(RestorationCost[] newRestorationCosts);\n  /// @dev Emitted when the initial time is updated.\n  event InitialTimeUpdated(uint256 time);\n\n  /// @dev Error when streak is still active.\n  error ErrAlreadyActivatedStreak();\n\n  /// @dev Error when streak lifetime is invalid e.g. when streak lifetime is 0.\n  error ErrInvalidStreakLifeTime();\n\n  /// @dev Error when the reset duration is larger than the streak lifetime.\n  error ErrInvalidResetDuration();\n\n  /// @dev Revert when there is no lost streak to restore.\n  error ErrNoLostStreak();\n\n  /// @dev Revert when the freeze time period has already ended.\n  error ErrFreezeTimeEnded();\n\n  /// @dev Revert when the amount acceptable is insufficient for restoration.\n  error ErrInsufficientPayment();\n\n  /// @dev Revert when the caller is not delegated by the address `to`.\n  error ErrCallerNotDelegated();\n\n  /// @dev Revert when delegatee attempts start new streak for delegator.\n  error ErrStartNewStreakByDelegatee();\n\n  /// @dev Revert when attempting to restore a streak, but the last streak count is 0.\n  error ErrZeroLostStreakCount();\n\n  /// @dev Revert when length of input arrays are mismatch.\n  error ErrInvalidLength();\n\n  /// @dev Revert when the order of restoration cost array is not ascending based on 'lowerMilestone'.\n  error ErrInvalidOrderOfRestorationCosts();\n\n  // @dev Error when streak is still active.\n  error ErrNewUserCannotRestore();\n\n  /**\n   * @dev Restore streak amount.\n   *\n   * Requirements:\n   * - The caller must be default admin.\n   */\n  function forceRestoreStreak(address[] calldata addresses, uint256[] calldata streaks) external;\n\n  /// @dev Return the restorable of `user`'s lost streak.\n  function isRestorable(address user) external view returns (bool);\n\n  /**\n   * @dev Returns streak info including amount and last update timestamp of sender.\n   * @return currentStreakCount The current streak count, equal to zero whether streak is lost.\n   * @return lastActivated The last pray timestamp.\n   * @return longestStreakCount The longest streak count, only affected from upgrading V3.\n   * @return lostStreakCount The lost streak count, equal to zero whether streak is still alive.\n   *\n   */\n  function getStreak(address user)\n    external\n    view\n    returns (uint256 currentStreakCount, uint256 lastActivated, uint256 longestStreakCount, uint256 lostStreakCount);\n\n  /**\n   * @dev Get the activation status of `user`.\n   * @return isLostStreak Indicates whether the streak is lost.\n   * @return hasCheckedToday Indicates whether the address `user` has prayed today.\n   */\n  function getActivationStatus(address user) external view returns (bool isLostStreak, bool hasCheckedToday);\n\n  /// @dev Returns active streak life time.\n  function getStreakLifeTime() external view returns (uint256);\n\n  /// @dev Returns the reset duration calculated based on the UTC.\n  function getResetDuration() external view returns (uint256);\n\n  /// @dev Returns the freeze period in timestamp for restoration.\n  function getFreezePeriod() external view returns (uint256);\n\n  /// @dev Returns the address treasury where receive the restoration fee.\n  function getTreasury() external view returns (address);\n\n  /// @dev Returns the address of token of restoration fee.\n  function getPaymentToken() external view returns (address);\n\n  /// @dev Returns all the cost in usd according to the lower milestones.\n  function getAllRestorationCosts() external view returns (RestorationCost[] memory);\n\n  /// @dev Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.\n  function getRestorationCosts(uint256 lostStreakCount) external view returns (uint256 costInPaymentToken);\n\n  /// @dev Returns the Initail Time calculated based on the UTC.\n  function getInitialTime() external view returns (uint256);\n\n  /**\n   * @dev Set new reset duration for streak.\n   * @param newResetDuration The reset duration time.\n   *\n   * Requirements:\n   * - The caller must be default admin.\n   * - The reset duration must be less than the streak life time.\n   *\n   * Emits the {ErrInvalidResetDuration} event.\n   */\n  function setResetDuration(uint256 newResetDuration) external;\n\n  /**\n   * @dev Update freeze period.\n   *\n   * Requirements:\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\n   *\n   * Emits {FreezePeriodUpdated} event.\n   */\n  function setFreezePeriod(uint256 newFreezePeriod) external;\n\n  /**\n   * @dev Update address of payment token.\n   *\n   * Requirements:\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\n   *\n   * Emits {PaymentTokenUpdated} event.\n   */\n  function setPaymentToken(address paymentToken) external;\n\n  /**\n   * @dev Update address of treasury.\n   *\n   * Requirements:\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\n   *\n   * Emits {TreasuryUpdated} event.\n   */\n  function setTreasury(address treasury) external;\n\n  /**\n   * @dev Update the cost for restoration.\n   *\n   * Requirements:\n   * - The caller must has `DEFAULT_ADMIN_ROLE`.\n   * - The array `restorationCost` must be sorted as ascending by `lowerMilestone`.\n   *\n   * Emits {RestorationCostUpdated} event.\n   */\n  function setRestorationCosts(RestorationCost[] memory restorationCosts) external;\n}\n",
        "license": "MIT"
      },
      "src/utils/transfers/TransferFromHelper.sol": {
        "keccak256": "0x2e6f6bfa1a4d2a69cb69de81d5af3bce69601ed6759d77fbbe416e1f40013286",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title TransferFromHelper\n * @dev Wraps transfer from methods for ERC20 tokens that do not consistently return true/false or revert.\n */\nlibrary TransferFromHelper {\n  /**\n   * @dev Transfers token and wraps result for the input address to a recipient.\n   */\n  function safeTransferFrom(address _token, address _from, address _to, uint256 _value) internal {\n    (bool success, bytes memory data) = _token.call(\n      abi.encodeWithSelector(\n        0x23b872dd, // IERC20.transferFrom.selector\n        _from,\n        _to,\n        _value\n      )\n    );\n\n    if (!success || !(data.length == 0 || abi.decode(data, (bool)))) {\n      revert(\n        string(\n          abi.encodePacked(\n            \"TransferFromHelper: could not transfer token \",\n            Strings.toHexString(uint160(_token), 20),\n            \" from \",\n            Strings.toHexString(uint160(_from), 20),\n            \" to \",\n            Strings.toHexString(uint160(_to), 20),\n            \" value \",\n            Strings.toHexString(_value)\n          )\n        )\n      );\n    }\n  }\n}\n",
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 47171,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 47174,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 46609,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)46604_storage)"
      },
      {
        "astId": 46919,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)49937_storage)"
      },
      {
        "astId": 51278,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_initialTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 51280,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_streakLifeTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 51285,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_usersStreakMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Streak)52416_storage)"
      },
      {
        "astId": 51288,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_resetTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 51291,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_freezeTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 51294,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 51297,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_paymentToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 51302,
        "contract": "src/CheckinMock.sol:CheckinMock",
        "label": "_restorationCosts",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(RestorationCost)52421_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32",
        "base": "t_bytes32"
      },
      "t_array(t_struct(RestorationCost)52421_storage)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "struct ICheckin.RestorationCost[]",
        "numberOfBytes": "32",
        "base": "t_struct(RestorationCost)52421_storage"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Streak)52416_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICheckin.Streak)",
        "numberOfBytes": "32",
        "value": "t_struct(Streak)52416_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)49937_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)49937_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)46604_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)46604_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)49937_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 49936,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)49622_storage"
          }
        ]
      },
      "t_struct(RestorationCost)52421_storage": {
        "encoding": "inplace",
        "label": "struct ICheckin.RestorationCost",
        "numberOfBytes": "32",
        "members": [
          {
            "astId": 52418,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "lowerMilestone",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 52420,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "costInToken",
            "offset": 4,
            "slot": "0",
            "type": "t_uint80"
          }
        ]
      },
      "t_struct(RoleData)46604_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 46601,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 46603,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ]
      },
      "t_struct(Set)49622_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 49617,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 49621,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ]
      },
      "t_struct(Streak)52416_storage": {
        "encoding": "inplace",
        "label": "struct ICheckin.Streak",
        "numberOfBytes": "96",
        "members": [
          {
            "astId": 52411,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 52413,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "lastActivated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 52415,
            "contract": "src/CheckinMock.sol:CheckinMock",
            "label": "longestCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  },
  "userdoc": {
    "version": 1,
    "kind": "user"
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "forceRestoreStreak(address[],uint256[])": {
        "details": "Restore streak amount. Requirements: - The caller must be default admin."
      },
      "getActivationStatus(address)": {
        "details": "Get the activation status of `user`.",
        "returns": {
          "hasCheckedToday": "Indicates whether the address `user` has prayed today.",
          "isLostStreak": "Indicates whether the streak is lost."
        }
      },
      "getAllRestorationCosts()": {
        "details": "Returns all the cost in usd according to the lower milestones."
      },
      "getFreezePeriod()": {
        "details": "Returns the freeze period in timestamp for restoration."
      },
      "getInitialTime()": {
        "details": "Returns the Initail Time calculated based on the UTC."
      },
      "getPaymentToken()": {
        "details": "Returns the address of token of restoration fee."
      },
      "getResetDuration()": {
        "details": "Returns the reset duration calculated based on the UTC."
      },
      "getRestorationCosts(uint256)": {
        "details": "Returns the cost in usd and cost in `paymentToken` according to the the lost streak count."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getStreak(address)": {
        "details": "Returns streak info including amount and last update timestamp of sender.",
        "returns": {
          "currentStreakCount": "The current streak count, equal to zero whether streak is lost.",
          "lastActivated": "The last pray timestamp.",
          "longestStreakCount": "The longest streak count, only affected from upgrading V3.",
          "lostStreakCount": "The lost streak count, equal to zero whether streak is still alive."
        }
      },
      "getStreakLifeTime()": {
        "details": "Returns active streak life time."
      },
      "getTreasury()": {
        "details": "Returns the address treasury where receive the restoration fee."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isRestorable(address)": {
        "details": "Return the restorable of `user`'s lost streak."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setFreezePeriod(uint256)": {
        "details": "Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event."
      },
      "setPaymentToken(address)": {
        "details": "Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event."
      },
      "setResetDuration(uint256)": {
        "details": "Set new reset duration for streak.",
        "params": {
          "newResetDuration": "The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event."
        }
      },
      "setRestorationCosts((uint32,uint80)[])": {
        "details": "Update the cost for restoration. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. - The array `restorationCost` must be sorted as ascending by `lowerMilestone`. Emits {RestorationCostUpdated} event."
      },
      "setTreasury(address)": {
        "details": "Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "events": {
      "CheckerCountSynced(address,(uint64,uint64))": {
        "details": "Emitted when the prayer count synced daily."
      },
      "FreezePeriodUpdated(uint256)": {
        "details": "Emitted when the freeze period is updated."
      },
      "InitialTimeUpdated(uint256)": {
        "details": "Emitted when the initial time is updated."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "PaymentTokenUpdated(address)": {
        "details": "Emitted when payment token is updated."
      },
      "ResetDurationUpdated(uint256)": {
        "details": "Emitted when the reset steak duration is updated."
      },
      "RestorationCostUpdated((uint32,uint80)[])": {
        "details": "Emitted when the restoration cost is updated."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "StreakLifeTimeChanged(uint256)": {
        "details": "Emitted when active streak lifetime duration is updated."
      },
      "StreakRestored(address,uint256,uint256,uint256)": {
        "details": "Emitted when the daily streak of an address of is updated."
      },
      "StreakUpdated(address,uint256,uint256,uint256)": {
        "details": "Emitted when the daily streak of an address of is updated."
      },
      "TreasuryUpdated(address)": {
        "details": "Emitted when treasury is updated."
      }
    },
    "errors": {
      "ErrAlreadyActivatedStreak()": [
        {
          "details": "Error when streak is still active."
        }
      ],
      "ErrCallerNotDelegated()": [
        {
          "details": "Revert when the caller is not delegated by the address `to`."
        }
      ],
      "ErrFreezeTimeEnded()": [
        {
          "details": "Revert when the freeze time period has already ended."
        }
      ],
      "ErrInsufficientPayment()": [
        {
          "details": "Revert when the amount acceptable is insufficient for restoration."
        }
      ],
      "ErrInvalidLength()": [
        {
          "details": "Revert when length of input arrays are mismatch."
        }
      ],
      "ErrInvalidOrderOfRestorationCosts()": [
        {
          "details": "Revert when the order of restoration cost array is not ascending based on 'lowerMilestone'."
        }
      ],
      "ErrInvalidResetDuration()": [
        {
          "details": "Error when the reset duration is larger than the streak lifetime."
        }
      ],
      "ErrInvalidStreakLifeTime()": [
        {
          "details": "Error when streak lifetime is invalid e.g. when streak lifetime is 0."
        }
      ],
      "ErrNoLostStreak()": [
        {
          "details": "Revert when there is no lost streak to restore."
        }
      ],
      "ErrStartNewStreakByDelegatee()": [
        {
          "details": "Revert when delegatee attempts start new streak for delegator."
        }
      ],
      "ErrZeroLostStreakCount()": [
        {
          "details": "Revert when attempting to restore a streak, but the last streak count is 0."
        }
      ]
    }
  },
  "ast": {
    "absolutePath": "src/CheckinMock.sol",
    "id": 52408,
    "exportedSymbols": {
      "BaseCheckin": [
        52371
      ],
      "CheckinMock": [
        52407
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:340:44",
    "nodes": [
      {
        "id": 52373,
        "nodeType": "PragmaDirective",
        "src": "32:24:44",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".23"
        ]
      },
      {
        "id": 52375,
        "nodeType": "ImportDirective",
        "src": "58:48:44",
        "nodes": [],
        "absolutePath": "src/BaseCheckin.sol",
        "file": "./BaseCheckin.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 52408,
        "sourceUnit": 52372,
        "symbolAliases": [
          {
            "foreign": {
              "id": 52374,
              "name": "BaseCheckin",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 52371,
              "src": "67:11:44",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 52407,
        "nodeType": "ContractDefinition",
        "src": "108:263:44",
        "nodes": [
          {
            "id": 52383,
            "nodeType": "FunctionDefinition",
            "src": "148:31:44",
            "nodes": [],
            "body": {
              "id": 52382,
              "nodeType": "Block",
              "src": "176:3:44",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 52380,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 52379,
                  "name": "BaseCheckin",
                  "nameLocations": [
                    "162:11:44"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 52371,
                  "src": "162:11:44"
                },
                "nodeType": "ModifierInvocation",
                "src": "162:13:44"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 52378,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "159:2:44"
            },
            "returnParameters": {
              "id": 52381,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "176:0:44"
            },
            "scope": 52407,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 52393,
            "nodeType": "FunctionDefinition",
            "src": "183:75:44",
            "nodes": [],
            "body": {
              "id": 52392,
              "nodeType": "Block",
              "src": "228:30:44",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 52389,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52385,
                        "src": "250:2:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 52388,
                      "name": "_activateStreak",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 51438,
                      "src": "234:15:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 52390,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "234:19:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 52391,
                  "nodeType": "ExpressionStatement",
                  "src": "234:19:44"
                }
              ]
            },
            "functionSelector": "31711309",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "activateStreak",
            "nameLocation": "192:14:44",
            "parameters": {
              "id": 52386,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52385,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "215:2:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 52393,
                  "src": "207:10:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 52384,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "207:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "206:12:44"
            },
            "returnParameters": {
              "id": 52387,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "228:0:44"
            },
            "scope": 52407,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 52406,
            "nodeType": "FunctionDefinition",
            "src": "262:107:44",
            "nodes": [],
            "body": {
              "id": 52405,
              "nodeType": "Block",
              "src": "327:42:44",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 52401,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52395,
                        "src": "348:2:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 52402,
                        "name": "maxAmountIn",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52397,
                        "src": "352:11:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 52400,
                      "name": "_restoreStreak",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 51527,
                      "src": "333:14:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 52403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "333:31:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 52404,
                  "nodeType": "ExpressionStatement",
                  "src": "333:31:44"
                }
              ]
            },
            "functionSelector": "43afef80",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "restoreStreak",
            "nameLocation": "271:13:44",
            "parameters": {
              "id": 52398,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 52395,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "293:2:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 52406,
                  "src": "285:10:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 52394,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "285:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 52397,
                  "mutability": "mutable",
                  "name": "maxAmountIn",
                  "nameLocation": "305:11:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 52406,
                  "src": "297:19:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 52396,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "297:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "284:33:44"
            },
            "returnParameters": {
              "id": 52399,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "327:0:44"
            },
            "scope": 52407,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 52376,
              "name": "BaseCheckin",
              "nameLocations": [
                "132:11:44"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 52371,
              "src": "132:11:44"
            },
            "id": 52377,
            "nodeType": "InheritanceSpecifier",
            "src": "132:11:44"
          }
        ],
        "canonicalName": "CheckinMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          52407,
          52371,
          52655,
          47025,
          46900,
          48628,
          48640,
          47123,
          47098,
          48375,
          47333
        ],
        "name": "CheckinMock",
        "nameLocation": "117:11:44",
        "scope": 52408,
        "usedErrors": [
          52496,
          52499,
          52502,
          52505,
          52508,
          52511,
          52514,
          52517,
          52520,
          52523,
          52526,
          52528
        ],
        "usedEvents": [
          47037,
          47046,
          47055,
          47179,
          52437,
          52448,
          52456,
          52461,
          52466,
          52471,
          52476,
          52481,
          52488,
          52493
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 44
}