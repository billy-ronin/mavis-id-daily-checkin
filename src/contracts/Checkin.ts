/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ICheckin {
  export type CheckerCountInfoStruct = {
    syncedDayIndex: BigNumberish;
    countPerDay: BigNumberish;
  };

  export type CheckerCountInfoStructOutput = [BigNumber, BigNumber] & {
    syncedDayIndex: BigNumber;
    countPerDay: BigNumber;
  };

  export type RestorationCostStruct = {
    lowerMilestone: BigNumberish;
    costInToken: BigNumberish;
  };

  export type RestorationCostStructOutput = [number, BigNumber] & {
    lowerMilestone: number;
    costInToken: BigNumber;
  };
}

export interface CheckinInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "activateStreak(address)": FunctionFragment;
    "forceRestoreStreak(address[],uint256[])": FunctionFragment;
    "getActivationStatus(address)": FunctionFragment;
    "getAllRestorationCosts()": FunctionFragment;
    "getFreezePeriod()": FunctionFragment;
    "getInitialTime()": FunctionFragment;
    "getPaymentToken()": FunctionFragment;
    "getResetDuration()": FunctionFragment;
    "getRestorationCosts(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getStreak(address)": FunctionFragment;
    "getStreakLifeTime()": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint256,uint256,uint256,address,address,(uint32,uint80)[])": FunctionFragment;
    "isRestorable(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "restoreStreak(address,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFreezePeriod(uint256)": FunctionFragment;
    "setPaymentToken(address)": FunctionFragment;
    "setResetDuration(uint256)": FunctionFragment;
    "setRestorationCosts((uint32,uint80)[])": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "activateStreak"
      | "forceRestoreStreak"
      | "getActivationStatus"
      | "getAllRestorationCosts"
      | "getFreezePeriod"
      | "getInitialTime"
      | "getPaymentToken"
      | "getResetDuration"
      | "getRestorationCosts"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getStreak"
      | "getStreakLifeTime"
      | "getTreasury"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isRestorable"
      | "renounceRole"
      | "restoreStreak"
      | "revokeRole"
      | "setFreezePeriod"
      | "setPaymentToken"
      | "setResetDuration"
      | "setRestorationCosts"
      | "setTreasury"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateStreak",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRestoreStreak",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivationStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRestorationCosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreezePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResetDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRestorationCosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getStreak", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getStreakLifeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      ICheckin.RestorationCostStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRestorable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreStreak",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreezePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setResetDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRestorationCosts",
    values: [ICheckin.RestorationCostStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRestoreStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRestorationCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreezePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResetDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRestorationCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStreak", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStreakLifeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRestorable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreStreak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFreezePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResetDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRestorationCosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "CheckerCountSynced(address,tuple)": EventFragment;
    "FreezePeriodUpdated(uint256)": EventFragment;
    "InitialTimeUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PaymentTokenUpdated(address)": EventFragment;
    "ResetDurationUpdated(uint256)": EventFragment;
    "RestorationCostUpdated(tuple[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StreakLifeTimeChanged(uint256)": EventFragment;
    "StreakRestored(address,uint256,uint256,uint256)": EventFragment;
    "StreakUpdated(address,uint256,uint256,uint256)": EventFragment;
    "TreasuryUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CheckerCountSynced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreezePeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RestorationCostUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreakLifeTimeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreakRestored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreakUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
}

export interface CheckerCountSyncedEventObject {
  prayer: string;
  prayerCountInfo: ICheckin.CheckerCountInfoStructOutput;
}
export type CheckerCountSyncedEvent = TypedEvent<
  [string, ICheckin.CheckerCountInfoStructOutput],
  CheckerCountSyncedEventObject
>;

export type CheckerCountSyncedEventFilter =
  TypedEventFilter<CheckerCountSyncedEvent>;

export interface FreezePeriodUpdatedEventObject {
  newFreezePeriod: BigNumber;
}
export type FreezePeriodUpdatedEvent = TypedEvent<
  [BigNumber],
  FreezePeriodUpdatedEventObject
>;

export type FreezePeriodUpdatedEventFilter =
  TypedEventFilter<FreezePeriodUpdatedEvent>;

export interface InitialTimeUpdatedEventObject {
  time: BigNumber;
}
export type InitialTimeUpdatedEvent = TypedEvent<
  [BigNumber],
  InitialTimeUpdatedEventObject
>;

export type InitialTimeUpdatedEventFilter =
  TypedEventFilter<InitialTimeUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PaymentTokenUpdatedEventObject {
  newPaymentToken: string;
}
export type PaymentTokenUpdatedEvent = TypedEvent<
  [string],
  PaymentTokenUpdatedEventObject
>;

export type PaymentTokenUpdatedEventFilter =
  TypedEventFilter<PaymentTokenUpdatedEvent>;

export interface ResetDurationUpdatedEventObject {
  newResetDuration: BigNumber;
}
export type ResetDurationUpdatedEvent = TypedEvent<
  [BigNumber],
  ResetDurationUpdatedEventObject
>;

export type ResetDurationUpdatedEventFilter =
  TypedEventFilter<ResetDurationUpdatedEvent>;

export interface RestorationCostUpdatedEventObject {
  newRestorationCosts: ICheckin.RestorationCostStructOutput[];
}
export type RestorationCostUpdatedEvent = TypedEvent<
  [ICheckin.RestorationCostStructOutput[]],
  RestorationCostUpdatedEventObject
>;

export type RestorationCostUpdatedEventFilter =
  TypedEventFilter<RestorationCostUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StreakLifeTimeChangedEventObject {
  streakLifeTime: BigNumber;
}
export type StreakLifeTimeChangedEvent = TypedEvent<
  [BigNumber],
  StreakLifeTimeChangedEventObject
>;

export type StreakLifeTimeChangedEventFilter =
  TypedEventFilter<StreakLifeTimeChangedEvent>;

export interface StreakRestoredEventObject {
  user: string;
  restoredStreakCount: BigNumber;
  lastUpdated: BigNumber;
  costInPaymentToken: BigNumber;
}
export type StreakRestoredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StreakRestoredEventObject
>;

export type StreakRestoredEventFilter = TypedEventFilter<StreakRestoredEvent>;

export interface StreakUpdatedEventObject {
  user: string;
  newAmount: BigNumber;
  newLastUpdated: BigNumber;
  longestStreakCount: BigNumber;
}
export type StreakUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StreakUpdatedEventObject
>;

export type StreakUpdatedEventFilter = TypedEventFilter<StreakUpdatedEvent>;

export interface TreasuryUpdatedEventObject {
  newTreasury: string;
}
export type TreasuryUpdatedEvent = TypedEvent<
  [string],
  TreasuryUpdatedEventObject
>;

export type TreasuryUpdatedEventFilter = TypedEventFilter<TreasuryUpdatedEvent>;

export interface Checkin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheckinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    activateStreak(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Restore streak amount. Requirements: - The caller must be default admin.
     */
    forceRestoreStreak(
      addresses: string[],
      streaks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the activation status of `user`.
     */
    getActivationStatus(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isLostStreak: boolean; hasCheckedToday: boolean }
    >;

    /**
     * Returns all the cost in usd according to the lower milestones.
     */
    getAllRestorationCosts(
      overrides?: CallOverrides
    ): Promise<[ICheckin.RestorationCostStructOutput[]]>;

    /**
     * Returns the freeze period in timestamp for restoration.
     */
    getFreezePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the Initail Time calculated based on the UTC.
     */
    getInitialTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of token of restoration fee.
     */
    getPaymentToken(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the reset duration calculated based on the UTC.
     */
    getResetDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.
     */
    getRestorationCosts(
      lostStreakCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { costInPaymentToken: BigNumber }>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns streak info including amount and last update timestamp of sender.
     */
    getStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentStreakCount: BigNumber;
        lastActivated: BigNumber;
        longestStreakCount: BigNumber;
        lostStreakCount: BigNumber;
      }
    >;

    /**
     * Returns active streak life time.
     */
    getStreakLifeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address treasury where receive the restoration fee.
     */
    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      streakLifeTime: BigNumberish,
      resetTime: BigNumberish,
      freezeTime: BigNumberish,
      paymentToken: string,
      treasury: string,
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Return the restorable of `user`'s lost streak.
     */
    isRestorable(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    restoreStreak(
      to: string,
      maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event.
     */
    setFreezePeriod(
      newFreezePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event.
     */
    setPaymentToken(
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set new reset duration for streak.
     * @param newResetDuration The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event.
     */
    setResetDuration(
      newResetDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRestorationCosts(
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event.
     */
    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  activateStreak(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Restore streak amount. Requirements: - The caller must be default admin.
   */
  forceRestoreStreak(
    addresses: string[],
    streaks: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the activation status of `user`.
   */
  getActivationStatus(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean] & { isLostStreak: boolean; hasCheckedToday: boolean }
  >;

  /**
   * Returns all the cost in usd according to the lower milestones.
   */
  getAllRestorationCosts(
    overrides?: CallOverrides
  ): Promise<ICheckin.RestorationCostStructOutput[]>;

  /**
   * Returns the freeze period in timestamp for restoration.
   */
  getFreezePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the Initail Time calculated based on the UTC.
   */
  getInitialTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of token of restoration fee.
   */
  getPaymentToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the reset duration calculated based on the UTC.
   */
  getResetDuration(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.
   */
  getRestorationCosts(
    lostStreakCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns streak info including amount and last update timestamp of sender.
   */
  getStreak(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      currentStreakCount: BigNumber;
      lastActivated: BigNumber;
      longestStreakCount: BigNumber;
      lostStreakCount: BigNumber;
    }
  >;

  /**
   * Returns active streak life time.
   */
  getStreakLifeTime(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address treasury where receive the restoration fee.
   */
  getTreasury(overrides?: CallOverrides): Promise<string>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
   */
  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    streakLifeTime: BigNumberish,
    resetTime: BigNumberish,
    freezeTime: BigNumberish,
    paymentToken: string,
    treasury: string,
    restorationCosts: ICheckin.RestorationCostStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Return the restorable of `user`'s lost streak.
   */
  isRestorable(user: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
   */
  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  restoreStreak(
    to: string,
    maxAmountIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
   */
  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event.
   */
  setFreezePeriod(
    newFreezePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event.
   */
  setPaymentToken(
    paymentToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set new reset duration for streak.
   * @param newResetDuration The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event.
   */
  setResetDuration(
    newResetDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRestorationCosts(
    restorationCosts: ICheckin.RestorationCostStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event.
   */
  setTreasury(
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See {IERC165-supportsInterface}.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    activateStreak(to: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Restore streak amount. Requirements: - The caller must be default admin.
     */
    forceRestoreStreak(
      addresses: string[],
      streaks: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Get the activation status of `user`.
     */
    getActivationStatus(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isLostStreak: boolean; hasCheckedToday: boolean }
    >;

    /**
     * Returns all the cost in usd according to the lower milestones.
     */
    getAllRestorationCosts(
      overrides?: CallOverrides
    ): Promise<ICheckin.RestorationCostStructOutput[]>;

    /**
     * Returns the freeze period in timestamp for restoration.
     */
    getFreezePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the Initail Time calculated based on the UTC.
     */
    getInitialTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of token of restoration fee.
     */
    getPaymentToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the reset duration calculated based on the UTC.
     */
    getResetDuration(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.
     */
    getRestorationCosts(
      lostStreakCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns streak info including amount and last update timestamp of sender.
     */
    getStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentStreakCount: BigNumber;
        lastActivated: BigNumber;
        longestStreakCount: BigNumber;
        lostStreakCount: BigNumber;
      }
    >;

    /**
     * Returns active streak life time.
     */
    getStreakLifeTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address treasury where receive the restoration fee.
     */
    getTreasury(overrides?: CallOverrides): Promise<string>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      streakLifeTime: BigNumberish,
      resetTime: BigNumberish,
      freezeTime: BigNumberish,
      paymentToken: string,
      treasury: string,
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Return the restorable of `user`'s lost streak.
     */
    isRestorable(user: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    restoreStreak(
      to: string,
      maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event.
     */
    setFreezePeriod(
      newFreezePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event.
     */
    setPaymentToken(
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set new reset duration for streak.
     * @param newResetDuration The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event.
     */
    setResetDuration(
      newResetDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRestorationCosts(
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event.
     */
    setTreasury(treasury: string, overrides?: CallOverrides): Promise<void>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CheckerCountSynced(address,tuple)"(
      prayer?: string | null,
      prayerCountInfo?: null
    ): CheckerCountSyncedEventFilter;
    CheckerCountSynced(
      prayer?: string | null,
      prayerCountInfo?: null
    ): CheckerCountSyncedEventFilter;

    "FreezePeriodUpdated(uint256)"(
      newFreezePeriod?: null
    ): FreezePeriodUpdatedEventFilter;
    FreezePeriodUpdated(newFreezePeriod?: null): FreezePeriodUpdatedEventFilter;

    "InitialTimeUpdated(uint256)"(time?: null): InitialTimeUpdatedEventFilter;
    InitialTimeUpdated(time?: null): InitialTimeUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PaymentTokenUpdated(address)"(
      newPaymentToken?: null
    ): PaymentTokenUpdatedEventFilter;
    PaymentTokenUpdated(newPaymentToken?: null): PaymentTokenUpdatedEventFilter;

    "ResetDurationUpdated(uint256)"(
      newResetDuration?: null
    ): ResetDurationUpdatedEventFilter;
    ResetDurationUpdated(
      newResetDuration?: null
    ): ResetDurationUpdatedEventFilter;

    "RestorationCostUpdated(tuple[])"(
      newRestorationCosts?: null
    ): RestorationCostUpdatedEventFilter;
    RestorationCostUpdated(
      newRestorationCosts?: null
    ): RestorationCostUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "StreakLifeTimeChanged(uint256)"(
      streakLifeTime?: null
    ): StreakLifeTimeChangedEventFilter;
    StreakLifeTimeChanged(
      streakLifeTime?: null
    ): StreakLifeTimeChangedEventFilter;

    "StreakRestored(address,uint256,uint256,uint256)"(
      user?: string | null,
      restoredStreakCount?: BigNumberish | null,
      lastUpdated?: BigNumberish | null,
      costInPaymentToken?: null
    ): StreakRestoredEventFilter;
    StreakRestored(
      user?: string | null,
      restoredStreakCount?: BigNumberish | null,
      lastUpdated?: BigNumberish | null,
      costInPaymentToken?: null
    ): StreakRestoredEventFilter;

    "StreakUpdated(address,uint256,uint256,uint256)"(
      user?: string | null,
      newAmount?: BigNumberish | null,
      newLastUpdated?: BigNumberish | null,
      longestStreakCount?: null
    ): StreakUpdatedEventFilter;
    StreakUpdated(
      user?: string | null,
      newAmount?: BigNumberish | null,
      newLastUpdated?: BigNumberish | null,
      longestStreakCount?: null
    ): StreakUpdatedEventFilter;

    "TreasuryUpdated(address)"(newTreasury?: null): TreasuryUpdatedEventFilter;
    TreasuryUpdated(newTreasury?: null): TreasuryUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    activateStreak(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Restore streak amount. Requirements: - The caller must be default admin.
     */
    forceRestoreStreak(
      addresses: string[],
      streaks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Get the activation status of `user`.
     */
    getActivationStatus(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns all the cost in usd according to the lower milestones.
     */
    getAllRestorationCosts(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the freeze period in timestamp for restoration.
     */
    getFreezePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the Initail Time calculated based on the UTC.
     */
    getInitialTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of token of restoration fee.
     */
    getPaymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the reset duration calculated based on the UTC.
     */
    getResetDuration(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.
     */
    getRestorationCosts(
      lostStreakCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns streak info including amount and last update timestamp of sender.
     */
    getStreak(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns active streak life time.
     */
    getStreakLifeTime(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address treasury where receive the restoration fee.
     */
    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      streakLifeTime: BigNumberish,
      resetTime: BigNumberish,
      freezeTime: BigNumberish,
      paymentToken: string,
      treasury: string,
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Return the restorable of `user`'s lost streak.
     */
    isRestorable(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    restoreStreak(
      to: string,
      maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event.
     */
    setFreezePeriod(
      newFreezePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event.
     */
    setPaymentToken(
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set new reset duration for streak.
     * @param newResetDuration The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event.
     */
    setResetDuration(
      newResetDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRestorationCosts(
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event.
     */
    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateStreak(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Restore streak amount. Requirements: - The caller must be default admin.
     */
    forceRestoreStreak(
      addresses: string[],
      streaks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the activation status of `user`.
     */
    getActivationStatus(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns all the cost in usd according to the lower milestones.
     */
    getAllRestorationCosts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the freeze period in timestamp for restoration.
     */
    getFreezePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the Initail Time calculated based on the UTC.
     */
    getInitialTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of token of restoration fee.
     */
    getPaymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the reset duration calculated based on the UTC.
     */
    getResetDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the cost in usd and cost in `paymentToken` according to the the lost streak count.
     */
    getRestorationCosts(
      lostStreakCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns streak info including amount and last update timestamp of sender.
     */
    getStreak(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns active streak life time.
     */
    getStreakLifeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address treasury where receive the restoration fee.
     */
    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      streakLifeTime: BigNumberish,
      resetTime: BigNumberish,
      freezeTime: BigNumberish,
      paymentToken: string,
      treasury: string,
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Return the restorable of `user`'s lost streak.
     */
    isRestorable(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    restoreStreak(
      to: string,
      maxAmountIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update freeze period. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {FreezePeriodUpdated} event.
     */
    setFreezePeriod(
      newFreezePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update address of payment token. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {PaymentTokenUpdated} event.
     */
    setPaymentToken(
      paymentToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set new reset duration for streak.
     * @param newResetDuration The reset duration time. Requirements: - The caller must be default admin. - The reset duration must be less than the streak life time. Emits the {ErrInvalidResetDuration} event.
     */
    setResetDuration(
      newResetDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRestorationCosts(
      restorationCosts: ICheckin.RestorationCostStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update address of treasury. Requirements: - The caller must has `DEFAULT_ADMIN_ROLE`. Emits {TreasuryUpdated} event.
     */
    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See {IERC165-supportsInterface}.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
